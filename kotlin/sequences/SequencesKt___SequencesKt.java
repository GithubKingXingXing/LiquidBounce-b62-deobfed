// 
// Decompiled by Procyon v0.5.36
// 

package kotlin.sequences;

import kotlin.jvm.JvmName;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.markers.KMappedMarker;
import kotlin.coroutines.Continuation;
import kotlin.collections.SlidingWindowKt;
import kotlin.Unit;
import kotlin.jvm.functions.Function3;
import kotlin.collections.IndexedValue;
import kotlin.collections.Grouping;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import kotlin.SinceKotlin;
import java.util.LinkedHashMap;
import java.util.Map;
import kotlin.Pair;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending;
import java.util.Comparator;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy;
import kotlin.TypeCastException;
import java.util.Collection;
import kotlin.jvm.functions.Function2;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.collections.CollectionsKt;
import java.util.NoSuchElementException;
import kotlin.internal.InlineOnly;
import org.jetbrains.annotations.Nullable;
import java.util.Iterator;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import kotlin.Metadata;

@Metadata(mv = { 1, 1, 13 }, bv = { 1, 0, 3 }, k = 5, xi = 1, d1 = { "\u0000\u0088\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b!\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001aa\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\u0086\b¢\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\u0086\b¢\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001aL\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aL\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010R\u001a4\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a4\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010[\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aU\u0010\\\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2'\u0010^\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b¢\u0006\u0002\u0010`\u001aj\u0010a\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2<\u0010^\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0bH\u0086\b¢\u0006\u0002\u0010c\u001a-\u0010d\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0086\b\u001aB\u0010g\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010f\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0BH\u0086\b\u001aE\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001ax\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001aA\u0010k\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0l\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a(\u0010m\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a-\u0010o\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a-\u0010p\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a{\u0010q\u001a\u0002Hr\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010r*\u00060sj\u0002`t*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010u\u001a\u0002Hr2\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005¢\u0006\u0002\u0010|\u001a`\u0010}\u001a\u00020~\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005\u001a\u001b\u0010\u007f\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010\u007f\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a)\u0010\u0080\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a\u001e\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a7\u0010\u0082\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u0083\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u0084\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001an\u0010\u0085\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\u0086\b¢\u0006\u0002\u0010H\u001ah\u0010\u0086\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b¢\u0006\u0002\u0010H\u001a=\u0010\u0087\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001aY\u0010\u0088\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aS\u0010\u0089\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010R\u001a*\u0010\u008a\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u008f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a>\u0010\u0090\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001¢\u0006\u0003\u0010\u0094\u0001\u001a*\u0010\u0095\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u0096\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a>\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001¢\u0006\u0003\u0010\u0094\u0001\u001a.\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010\u0099\u0001\u001a8\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002¢\u0006\u0003\u0010\u009c\u0001\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010\u0099\u0001\u001a\u0017\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0007\u001aF\u0010 \u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010\u0099\u0001\u001a8\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002¢\u0006\u0003\u0010\u009c\u0001\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010\u0099\u0001\u001aX\u0010£\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010BH\u0086\b¢\u0006\u0003\u0010¥\u0001\u001am\u0010¦\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010^\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010bH\u0086\b¢\u0006\u0003\u0010§\u0001\u001a#\u0010¨\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\u001c\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a3\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a\u001e\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a(\u0010«\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010¬\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00ad\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010¯\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b±\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\b²\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\b³\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\b´\u0001\u001a\u0019\u0010°\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\bµ\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\b¶\u0001\u001a.\u0010·\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010¸\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010¹\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010º\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010»\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001a)\u0010¼\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020½\u0001j\t\u0012\u0004\u0012\u0002H\u0002`¾\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010¿\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00c0\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020j\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00c1\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00c2\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00c3\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00c4\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010\u00c5\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00c6\u0001\u001a\u00020$2\t\b\u0002\u0010\u00c7\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010\u00c5\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u00c6\u0001\u001a\u00020$2\t\b\u0002\u0010\u00c7\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u00c8\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u00c9\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010\u00ca\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00cb\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ar\u0010\u00ca\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00cb\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00cc\u0001\u0012\u0014\u0012\u0012H-¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00cd\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010\u00ce\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00cc\u0001\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(\u00cd\u0001\u0012\u0004\u0012\u0002H-0BH\u0007¨\u0006\u00cf\u0001" }, d2 = { "all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib" }, xs = "kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt extends SequencesKt___SequencesJvmKt
{
    public static final <T> boolean contains(@NotNull final Sequence<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return indexOf($receiver, element) >= 0;
    }
    
    public static final <T> T elementAt(@NotNull final Sequence<? extends T> $receiver, final int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return elementAtOrElse($receiver, index, (Function1<? super Integer, ? extends T>)new SequencesKt___SequencesKt$elementAt.SequencesKt___SequencesKt$elementAt$1(index));
    }
    
    public static final <T> T elementAtOrElse(@NotNull final Sequence<? extends T> $receiver, final int index, @NotNull final Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if (index < 0) {
            return (T)defaultValue.invoke(index);
        }
        final Iterator iterator = $receiver.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            final Object element = iterator.next();
            if (index == count++) {
                return (T)element;
            }
        }
        return (T)defaultValue.invoke(index);
    }
    
    @Nullable
    public static final <T> T elementAtOrNull(@NotNull final Sequence<? extends T> $receiver, final int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (index < 0) {
            return null;
        }
        final Iterator iterator = $receiver.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            final Object element = iterator.next();
            if (index == count++) {
                return (T)element;
            }
        }
        return null;
    }
    
    @InlineOnly
    private static final <T> T find(@NotNull final Sequence<? extends T> $receiver, final Function1<? super T, Boolean> predicate) {
        final Sequence $receiver$iv = $receiver;
        for (final Object element$iv : $receiver$iv) {
            if (predicate.invoke((Object)element$iv)) {
                final Object o = element$iv;
                return (T)o;
            }
        }
        final Object o = null;
        return (T)o;
    }
    
    @InlineOnly
    private static final <T> T findLast(@NotNull final Sequence<? extends T> $receiver, final Function1<? super T, Boolean> predicate) {
        final Sequence $receiver$iv = $receiver;
        Object last$iv = null;
        for (final Object element$iv : $receiver$iv) {
            if (predicate.invoke((Object)element$iv)) {
                last$iv = element$iv;
            }
        }
        return (T)last$iv;
    }
    
    public static final <T> T first(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        return iterator.next();
    }
    
    public static final <T> T first(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }
    
    @Nullable
    public static final <T> T firstOrNull(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        return iterator.next();
    }
    
    @Nullable
    public static final <T> T firstOrNull(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        return null;
    }
    
    public static final <T> int indexOf(@NotNull final Sequence<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    
    public static final <T> int indexOfFirst(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke((Object)item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    
    public static final <T> int indexOfLast(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke((Object)item)) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }
    
    public static final <T> T last(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        Object last = iterator.next();
        while (iterator.hasNext()) {
            last = iterator.next();
        }
        return (T)last;
    }
    
    public static final <T> T last(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object last = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                last = element;
                found = true;
            }
        }
        if (!found) {
            throw new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return (T)last;
    }
    
    public static final <T> int lastIndexOf(@NotNull final Sequence<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int lastIndex = -1;
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object last = iterator.next();
        while (iterator.hasNext()) {
            last = iterator.next();
        }
        return (T)last;
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object last = null;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                last = element;
            }
        }
        return (T)last;
    }
    
    public static final <T> T single(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Sequence is empty.");
        }
        final Object single = iterator.next();
        if (iterator.hasNext()) {
            throw new IllegalArgumentException("Sequence has more than one element.");
        }
        return (T)single;
    }
    
    public static final <T> T single(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object single = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                if (found) {
                    throw new IllegalArgumentException("Sequence contains more than one matching element.");
                }
                single = element;
                found = true;
            }
        }
        if (!found) {
            throw new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return (T)single;
    }
    
    @Nullable
    public static final <T> T singleOrNull(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        final Object single = iterator.next();
        if (iterator.hasNext()) {
            return null;
        }
        return (T)single;
    }
    
    @Nullable
    public static final <T> T singleOrNull(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object single = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                if (found) {
                    return null;
                }
                single = element;
                found = true;
            }
        }
        if (!found) {
            return null;
        }
        return (T)single;
    }
    
    @NotNull
    public static final <T> Sequence<T> drop(@NotNull final Sequence<? extends T> $receiver, final int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (n < 0) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        return (Sequence<T>)((n == 0) ? $receiver : (($receiver instanceof DropTakeSequence) ? ((DropTakeSequence<? extends T>)$receiver).drop(n) : ((DropSequence<Object>)new DropSequence<Object>($receiver, n))));
    }
    
    @NotNull
    public static final <T> Sequence<T> dropWhile(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new DropWhileSequence<T>($receiver, predicate);
    }
    
    @NotNull
    public static final <T> Sequence<T> filter(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new FilteringSequence<T>($receiver, true, predicate);
    }
    
    @NotNull
    public static final <T> Sequence<T> filterIndexed(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new TransformingSequence<Object, T>(new FilteringSequence<Object>(new IndexingSequence<Object>($receiver), true, (Function1<?, Boolean>)new SequencesKt___SequencesKt$filterIndexed.SequencesKt___SequencesKt$filterIndexed$1((Function2)predicate)), (Function1<?, ? extends T>)SequencesKt___SequencesKt$filterIndexed.SequencesKt___SequencesKt$filterIndexed$2.INSTANCE);
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, Boolean> predicate) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* destination */
        //     7: ldc_w           "destination"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_2         /* predicate */
        //    14: ldc_w           "predicate"
        //    17: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    20: aload_0         /* $receiver */
        //    21: astore          $receiver$iv
        //    23: iconst_0       
        //    24: istore          index$iv
        //    26: aload           $receiver$iv
        //    28: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    33: astore          6
        //    35: aload           6
        //    37: invokeinterface java/util/Iterator.hasNext:()Z
        //    42: ifeq            142
        //    45: aload           6
        //    47: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    52: astore          item$iv
        //    54: iload           index$iv
        //    56: iinc            index$iv, 1
        //    59: istore          8
        //    61: iload           8
        //    63: ifge            95
        //    66: iconst_1       
        //    67: iconst_3       
        //    68: iconst_0       
        //    69: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    72: ifeq            81
        //    75: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    78: goto            95
        //    81: new             Ljava/lang/ArithmeticException;
        //    84: dup            
        //    85: ldc_w           "Index overflow has happened."
        //    88: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    91: checkcast       Ljava/lang/Throwable;
        //    94: athrow         
        //    95: iload           8
        //    97: istore          9
        //    99: iload           9
        //   101: aload           item$iv
        //   103: astore          10
        //   105: istore          index
        //   107: aload_2         /* predicate */
        //   108: iload           index
        //   110: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   113: aload           element
        //   115: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   120: checkcast       Ljava/lang/Boolean;
        //   123: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //   126: ifeq            138
        //   129: aload_1         /* destination */
        //   130: aload           element
        //   132: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   137: pop            
        //   138: nop            
        //   139: goto            35
        //   142: nop            
        //   143: aload_1         /* destination */
        //   144: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;C::Ljava/util/Collection<-TT;>;>(Lkotlin/sequences/Sequence<+TT;>;TC;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;Ljava/lang/Boolean;>;)TC;
        //    StackMapTable: 00 05 FF 00 23 00 07 07 01 1A 07 01 AC 07 01 AE 00 07 01 1A 01 07 01 20 00 00 FD 00 2D 07 01 2A 01 0D FE 00 2A 01 07 01 2A 01 FF 00 03 00 07 07 01 1A 07 01 AC 07 01 AE 00 07 01 1A 01 07 01 20 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static final <R> Sequence<R> filterIsInstance(@NotNull final Sequence<?> $receiver) {
        Intrinsics.needClassReification();
        final Sequence<Object> filter = (Sequence<Object>)filter((Sequence<? extends R>)$receiver, (Function1<? super R, Boolean>)SequencesKt___SequencesKt$filterIsInstance.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE);
        if (filter == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
        }
        return (Sequence<R>)filter;
    }
    
    private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull final Sequence<?> $receiver, final C destination) {
        for (final Object next : $receiver) {
            final Object element = next;
            Intrinsics.reifiedOperationMarker(3, "R");
            if (next instanceof Object) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T> Sequence<T> filterNot(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new FilteringSequence<T>($receiver, false, predicate);
    }
    
    @NotNull
    public static final <T> Sequence<T> filterNotNull(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Sequence<Object> filterNot = (Sequence<Object>)filterNot($receiver, (Function1<? super T, Boolean>)SequencesKt___SequencesKt$filterNotNull.SequencesKt___SequencesKt$filterNotNull$1.INSTANCE);
        if (filterNot == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
        }
        return (Sequence<T>)filterNot;
    }
    
    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (final Object element : $receiver) {
            if (element != null) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (!predicate.invoke((Object)element)) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T> Sequence<T> take(@NotNull final Sequence<? extends T> $receiver, final int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (n < 0) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        return (n == 0) ? SequencesKt__SequencesKt.emptySequence() : (($receiver instanceof DropTakeSequence) ? ((DropTakeSequence<T>)$receiver).take(n) : ((TakeSequence<T>)new TakeSequence<T>($receiver, n)));
    }
    
    @NotNull
    public static final <T> Sequence<T> takeWhile(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new TakeWhileSequence<T>($receiver, predicate);
    }
    
    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (Sequence<T>)new SequencesKt___SequencesKt$sorted.SequencesKt___SequencesKt$sorted$1((Sequence)$receiver);
    }
    
    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
            @Override
            public final int compare(final T a, final T b) {
                return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(a), (Comparable)this.$selector.invoke(b));
            }
        });
    }
    
    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
            @Override
            public final int compare(final T a, final T b) {
                return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(b), (Comparable)this.$selector.invoke(a));
            }
        });
    }
    
    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return sortedWith($receiver, ComparisonsKt__ComparisonsKt.reverseOrder());
    }
    
    @NotNull
    public static final <T> Sequence<T> sortedWith(@NotNull final Sequence<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        return (Sequence<T>)new SequencesKt___SequencesKt$sortedWith.SequencesKt___SequencesKt$sortedWith$1((Sequence)$receiver, (Comparator)comparator);
    }
    
    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* transform */
        //     7: ldc_w           "transform"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_0         /* $receiver */
        //    14: astore_3       
        //    15: new             Ljava/util/LinkedHashMap;
        //    18: dup            
        //    19: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    22: checkcast       Ljava/util/Map;
        //    25: astore          destination$iv
        //    27: aload_3         /* $receiver$iv */
        //    28: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    33: astore          5
        //    35: aload           5
        //    37: invokeinterface java/util/Iterator.hasNext:()Z
        //    42: ifeq            92
        //    45: aload           5
        //    47: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    52: astore          element$iv
        //    54: aload           destination$iv
        //    56: astore          7
        //    58: aload_1         /* transform */
        //    59: aload           element$iv
        //    61: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    66: checkcast       Lkotlin/Pair;
        //    69: astore          8
        //    71: aload           7
        //    73: aload           8
        //    75: invokevirtual   kotlin/Pair.getFirst:()Ljava/lang/Object;
        //    78: aload           8
        //    80: invokevirtual   kotlin/Pair.getSecond:()Ljava/lang/Object;
        //    83: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    88: pop            
        //    89: goto            35
        //    92: aload           destination$iv
        //    94: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lkotlin/sequences/Sequence<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+Lkotlin/Pair<+TK;+TV;>;>;)Ljava/util/Map<TK;TV;>;
        //    StackMapTable: 00 02 FF 00 23 00 06 07 01 1A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00 38
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* keySelector */
        //     7: ldc_w           "keySelector"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_0         /* $receiver */
        //    14: astore_3       
        //    15: new             Ljava/util/LinkedHashMap;
        //    18: dup            
        //    19: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    22: checkcast       Ljava/util/Map;
        //    25: astore          destination$iv
        //    27: aload_3         /* $receiver$iv */
        //    28: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    33: astore          5
        //    35: aload           5
        //    37: invokeinterface java/util/Iterator.hasNext:()Z
        //    42: ifeq            75
        //    45: aload           5
        //    47: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    52: astore          element$iv
        //    54: aload           destination$iv
        //    56: aload_1         /* keySelector */
        //    57: aload           element$iv
        //    59: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    64: aload           element$iv
        //    66: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    71: pop            
        //    72: goto            35
        //    75: aload           destination$iv
        //    77: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;>(Lkotlin/sequences/Sequence<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;)Ljava/util/Map<TK;TT;>;
        //    StackMapTable: 00 02 FF 00 23 00 06 07 01 1A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00 27
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* keySelector */
        //     7: ldc_w           "keySelector"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_2         /* valueTransform */
        //    14: ldc_w           "valueTransform"
        //    17: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    20: aload_0         /* $receiver */
        //    21: astore          4
        //    23: new             Ljava/util/LinkedHashMap;
        //    26: dup            
        //    27: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    30: checkcast       Ljava/util/Map;
        //    33: astore          destination$iv
        //    35: aload           $receiver$iv
        //    37: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    42: astore          6
        //    44: aload           6
        //    46: invokeinterface java/util/Iterator.hasNext:()Z
        //    51: ifeq            90
        //    54: aload           6
        //    56: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    61: astore          element$iv
        //    63: aload           destination$iv
        //    65: aload_1         /* keySelector */
        //    66: aload           element$iv
        //    68: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    73: aload_2         /* valueTransform */
        //    74: aload           element$iv
        //    76: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    81: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    86: pop            
        //    87: goto            44
        //    90: aload           destination$iv
        //    92: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lkotlin/sequences/Sequence<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;Lkotlin/jvm/functions/Function1<-TT;+TV;>;)Ljava/util/Map<TK;TV;>;
        //    StackMapTable: 00 02 FF 00 2C 00 07 07 01 1A 07 01 0A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00 2D
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (final Object element : $receiver) {
            destination.put((Object)keySelector.invoke((Object)element), (Object)element);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (final Object element : $receiver) {
            destination.put((Object)keySelector.invoke((Object)element), (Object)valueTransform.invoke((Object)element));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object element : $receiver) {
            final Pair pair = (Pair)transform.invoke((Object)element);
            destination.put(pair.getFirst(), (Object)pair.getSecond());
        }
        return destination;
    }
    
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull final Sequence<? extends K> $receiver, @NotNull final Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        final LinkedHashMap result = new LinkedHashMap();
        final Sequence $receiver$iv = $receiver;
        for (final Object element$iv : $receiver$iv) {
            result.put(element$iv, valueSelector.invoke((Object)element$iv));
        }
        return (Map<K, V>)result;
    }
    
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull final Sequence<? extends K> $receiver, @NotNull final M destination, @NotNull final Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        for (final Object element : $receiver) {
            destination.put((Object)element, (Object)valueSelector.invoke((Object)element));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (final Object item : $receiver) {
            destination.add((Object)item);
        }
        return destination;
    }
    
    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return toCollection((Sequence<?>)$receiver, (HashSet<T>)new HashSet<T>());
    }
    
    @NotNull
    public static final <T> List<T> toList(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList((Sequence<? extends T>)$receiver));
    }
    
    @NotNull
    public static final <T> List<T> toMutableList(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return toCollection((Sequence<?>)$receiver, (ArrayList<T>)new ArrayList<T>());
    }
    
    @NotNull
    public static final <T> Set<T> toSet(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return SetsKt__SetsKt.optimizeReadOnlySet((Set<? extends T>)toCollection((Sequence<?>)$receiver, (LinkedHashSet<? extends T>)new LinkedHashSet<Object>()));
    }
    
    @NotNull
    public static final <T, R> Sequence<R> flatMap(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new FlatteningSequence<Object, Object, R>($receiver, transform, (Function1<?, ? extends Iterator<? extends R>>)SequencesKt___SequencesKt$flatMap.SequencesKt___SequencesKt$flatMap$1.INSTANCE);
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object element : $receiver) {
            final Sequence list = (Sequence)transform.invoke((Object)element);
            CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)destination, (Sequence<?>)list);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* keySelector */
        //     7: ldc_w           "keySelector"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_0         /* $receiver */
        //    14: astore_3       
        //    15: new             Ljava/util/LinkedHashMap;
        //    18: dup            
        //    19: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    22: checkcast       Ljava/util/Map;
        //    25: astore          destination$iv
        //    27: aload_3         /* $receiver$iv */
        //    28: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    33: astore          5
        //    35: aload           5
        //    37: invokeinterface java/util/Iterator.hasNext:()Z
        //    42: ifeq            132
        //    45: aload           5
        //    47: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    52: astore          element$iv
        //    54: aload_1         /* keySelector */
        //    55: aload           element$iv
        //    57: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    62: astore          key$iv
        //    64: aload           destination$iv
        //    66: astore          $receiver$iv$iv
        //    68: aload           $receiver$iv$iv
        //    70: aload           key$iv
        //    72: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    77: astore          value$iv$iv
        //    79: aload           value$iv$iv
        //    81: ifnonnull       111
        //    84: nop            
        //    85: new             Ljava/util/ArrayList;
        //    88: dup            
        //    89: invokespecial   java/util/ArrayList.<init>:()V
        //    92: astore          answer$iv$iv
        //    94: aload           $receiver$iv$iv
        //    96: aload           key$iv
        //    98: aload           answer$iv$iv
        //   100: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   105: pop            
        //   106: aload           answer$iv$iv
        //   108: goto            113
        //   111: aload           value$iv$iv
        //   113: nop            
        //   114: checkcast       Ljava/util/List;
        //   117: astore          list$iv
        //   119: aload           list$iv
        //   121: aload           element$iv
        //   123: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   128: pop            
        //   129: goto            35
        //   132: aload           destination$iv
        //   134: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;>(Lkotlin/sequences/Sequence<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;)Ljava/util/Map<TK;Ljava/util/List<TT;>;>;
        //    StackMapTable: 00 04 FF 00 23 00 06 07 01 1A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00 FF 00 4B 00 0A 07 01 1A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 07 01 2A 07 01 2A 07 02 07 07 01 2A 00 00 41 07 01 2A FF 00 12 00 06 07 01 1A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* keySelector */
        //     7: ldc_w           "keySelector"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_2         /* valueTransform */
        //    14: ldc_w           "valueTransform"
        //    17: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    20: aload_0         /* $receiver */
        //    21: astore          4
        //    23: new             Ljava/util/LinkedHashMap;
        //    26: dup            
        //    27: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    30: checkcast       Ljava/util/Map;
        //    33: astore          destination$iv
        //    35: aload           $receiver$iv
        //    37: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    42: astore          6
        //    44: aload           6
        //    46: invokeinterface java/util/Iterator.hasNext:()Z
        //    51: ifeq            147
        //    54: aload           6
        //    56: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    61: astore          element$iv
        //    63: aload_1         /* keySelector */
        //    64: aload           element$iv
        //    66: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    71: astore          key$iv
        //    73: aload           destination$iv
        //    75: astore          $receiver$iv$iv
        //    77: aload           $receiver$iv$iv
        //    79: aload           key$iv
        //    81: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    86: astore          value$iv$iv
        //    88: aload           value$iv$iv
        //    90: ifnonnull       120
        //    93: nop            
        //    94: new             Ljava/util/ArrayList;
        //    97: dup            
        //    98: invokespecial   java/util/ArrayList.<init>:()V
        //   101: astore          answer$iv$iv
        //   103: aload           $receiver$iv$iv
        //   105: aload           key$iv
        //   107: aload           answer$iv$iv
        //   109: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   114: pop            
        //   115: aload           answer$iv$iv
        //   117: goto            122
        //   120: aload           value$iv$iv
        //   122: nop            
        //   123: checkcast       Ljava/util/List;
        //   126: astore          list$iv
        //   128: aload           list$iv
        //   130: aload_2         /* valueTransform */
        //   131: aload           element$iv
        //   133: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //   138: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   143: pop            
        //   144: goto            44
        //   147: aload           destination$iv
        //   149: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lkotlin/sequences/Sequence<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;Lkotlin/jvm/functions/Function1<-TT;+TV;>;)Ljava/util/Map<TK;Ljava/util/List<TV;>;>;
        //    StackMapTable: 00 04 FF 00 2C 00 07 07 01 1A 07 01 0A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00 FF 00 4B 00 0B 07 01 1A 07 01 0A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 07 01 2A 07 01 2A 07 02 07 07 01 2A 00 00 41 07 01 2A FF 00 18 00 07 07 01 1A 07 01 0A 07 01 0A 00 07 01 1A 07 02 07 07 01 20 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (final Object element : $receiver) {
            final Object key = keySelector.invoke((Object)element);
            final Map $receiver$iv = destination;
            final Object value$iv = $receiver$iv.get(key);
            Object o;
            if (value$iv == null) {
                final Object answer$iv = new ArrayList();
                $receiver$iv.put(key, answer$iv);
                o = answer$iv;
            }
            else {
                o = value$iv;
            }
            final List list = (List)o;
            list.add(element);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (final Object element : $receiver) {
            final Object key = keySelector.invoke((Object)element);
            final Map $receiver$iv = destination;
            final Object value$iv = $receiver$iv.get(key);
            Object o;
            if (value$iv == null) {
                final Object answer$iv = new ArrayList();
                $receiver$iv.put(key, answer$iv);
                o = answer$iv;
            }
            else {
                o = value$iv;
            }
            final List list = (List)o;
            list.add(valueTransform.invoke((Object)element));
        }
        return destination;
    }
    
    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return (Grouping<T, K>)new SequencesKt___SequencesKt$groupingBy.SequencesKt___SequencesKt$groupingBy$1((Sequence)$receiver, (Function1)keySelector);
    }
    
    @NotNull
    public static final <T, R> Sequence<R> map(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new TransformingSequence<Object, R>($receiver, transform);
    }
    
    @NotNull
    public static final <T, R> Sequence<R> mapIndexed(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new TransformingIndexedSequence<Object, R>($receiver, transform);
    }
    
    @NotNull
    public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return filterNotNull((Sequence<? extends R>)new TransformingIndexedSequence<Object, Object>($receiver, (Function2<? super Integer, ? super Object, ?>)transform));
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc             "receiver$0"
        //     3: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     6: aload_1         /* destination */
        //     7: ldc_w           "destination"
        //    10: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    13: aload_2         /* transform */
        //    14: ldc_w           "transform"
        //    17: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    20: aload_0         /* $receiver */
        //    21: astore          $receiver$iv
        //    23: iconst_0       
        //    24: istore          index$iv
        //    26: aload           $receiver$iv
        //    28: invokeinterface kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
        //    33: astore          6
        //    35: aload           6
        //    37: invokeinterface java/util/Iterator.hasNext:()Z
        //    42: ifeq            147
        //    45: aload           6
        //    47: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    52: astore          item$iv
        //    54: iload           index$iv
        //    56: iinc            index$iv, 1
        //    59: istore          8
        //    61: iload           8
        //    63: ifge            95
        //    66: iconst_1       
        //    67: iconst_3       
        //    68: iconst_0       
        //    69: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    72: ifeq            81
        //    75: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    78: goto            95
        //    81: new             Ljava/lang/ArithmeticException;
        //    84: dup            
        //    85: ldc_w           "Index overflow has happened."
        //    88: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    91: checkcast       Ljava/lang/Throwable;
        //    94: athrow         
        //    95: iload           8
        //    97: istore          9
        //    99: iload           9
        //   101: aload           item$iv
        //   103: astore          10
        //   105: istore          index
        //   107: aload_2         /* transform */
        //   108: iload           index
        //   110: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   113: aload           element
        //   115: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   120: dup            
        //   121: ifnull          142
        //   124: astore          12
        //   126: aload           12
        //   128: astore          it
        //   130: aload_1         /* destination */
        //   131: aload           it
        //   133: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   138: pop            
        //   139: goto            143
        //   142: pop            
        //   143: nop            
        //   144: goto            35
        //   147: nop            
        //   148: aload_1         /* destination */
        //   149: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;C::Ljava/util/Collection<-TR;>;>(Lkotlin/sequences/Sequence<+TT;>;TC;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;+TR;>;)TC;
        //    StackMapTable: 00 06 FF 00 23 00 07 07 01 1A 07 01 AC 07 01 AE 00 07 01 1A 01 07 01 20 00 00 FD 00 2D 07 01 2A 01 0D FF 00 2E 00 0C 07 01 1A 07 01 AC 07 01 AE 00 07 01 1A 01 07 01 20 07 01 2A 01 01 07 01 2A 01 00 01 07 01 2A 00 FF 00 03 00 07 07 01 1A 07 01 AC 07 01 AE 00 07 01 1A 01 07 01 20 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (final Object item : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination.add((Object)transform.invoke(Integer.valueOf(i), (Object)item));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, R> Sequence<R> mapNotNull(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return filterNotNull((Sequence<? extends R>)new TransformingSequence<Object, Object>($receiver, (Function1<? super Object, ?>)transform));
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        final Sequence $receiver$iv = $receiver;
        for (final Object element : $receiver$iv) {
            final Object element$iv = element;
            final R invoke = (R)transform.invoke((Object)element);
            if (invoke != null) {
                final Object it = invoke;
                destination.add((Object)it);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object item : $receiver) {
            destination.add((Object)transform.invoke((Object)item));
        }
        return destination;
    }
    
    @NotNull
    public static final <T> Sequence<IndexedValue<T>> withIndex(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (Sequence<IndexedValue<T>>)new IndexingSequence($receiver);
    }
    
    @NotNull
    public static final <T> Sequence<T> distinct(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return distinctBy($receiver, (Function1<? super T, ?>)SequencesKt___SequencesKt$distinct.SequencesKt___SequencesKt$distinct$1.INSTANCE);
    }
    
    @NotNull
    public static final <T, K> Sequence<T> distinctBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return new DistinctSequence<T, Object>($receiver, selector);
    }
    
    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final LinkedHashSet set = new LinkedHashSet();
        for (final Object item : $receiver) {
            set.add(item);
        }
        return (Set<T>)set;
    }
    
    public static final <T> boolean all(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (!predicate.invoke((Object)element)) {
                return false;
            }
        }
        return true;
    }
    
    public static final <T> boolean any(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return $receiver.iterator().hasNext();
    }
    
    public static final <T> boolean any(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return true;
            }
        }
        return false;
    }
    
    public static final <T> int count(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int count = 0;
        for (final Object element : $receiver) {
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count;
    }
    
    public static final <T> int count(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int count = 0;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element) && ++count < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt.throwCountOverflow();
            }
        }
        return count;
    }
    
    public static final <T, R> R fold(@NotNull final Sequence<? extends T> $receiver, final R initial, @NotNull final Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Object accumulator = initial;
        for (final Object element : $receiver) {
            accumulator = operation.invoke((Object)accumulator, (Object)element);
        }
        return (R)accumulator;
    }
    
    public static final <T, R> R foldIndexed(@NotNull final Sequence<? extends T> $receiver, final R initial, @NotNull final Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int index = 0;
        Object accumulator = initial;
        for (final Object element : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            accumulator = operation.invoke(Integer.valueOf(i), (Object)accumulator, (Object)element);
        }
        return (R)accumulator;
    }
    
    public static final <T> void forEach(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (final Object element : $receiver) {
            action.invoke((Object)element);
        }
    }
    
    public static final <T> void forEachIndexed(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        int index = 0;
        for (final Object item : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(i), (Object)item);
        }
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double max(@NotNull final Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = iterator.next().doubleValue();
        if (Double.isNaN(max)) {
            return max;
        }
        while (iterator.hasNext()) {
            final double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return e;
            }
            if (max >= e) {
                continue;
            }
            max = e;
        }
        return max;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float max(@NotNull final Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = iterator.next().floatValue();
        if (Float.isNaN(max)) {
            return max;
        }
        while (iterator.hasNext()) {
            final float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return e;
            }
            if (max >= e) {
                continue;
            }
            max = e;
        }
        return max;
    }
    
    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Comparable max = iterator.next();
        while (iterator.hasNext()) {
            final Comparable e = iterator.next();
            if (max.compareTo(e) < 0) {
                max = e;
            }
        }
        return (T)max;
    }
    
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object maxElem = iterator.next();
        Comparable maxValue = (Comparable)selector.invoke((Object)maxElem);
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            final Comparable v = (Comparable)selector.invoke((Object)e);
            if (maxValue.compareTo(v) < 0) {
                maxElem = e;
                maxValue = v;
            }
        }
        return (T)maxElem;
    }
    
    @Nullable
    public static final <T> T maxWith(@NotNull final Sequence<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object max = iterator.next();
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            if (comparator.compare((Object)max, (Object)e) < 0) {
                max = e;
            }
        }
        return (T)max;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double min(@NotNull final Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = iterator.next().doubleValue();
        if (Double.isNaN(min)) {
            return min;
        }
        while (iterator.hasNext()) {
            final double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return e;
            }
            if (min <= e) {
                continue;
            }
            min = e;
        }
        return min;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float min(@NotNull final Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = iterator.next().floatValue();
        if (Float.isNaN(min)) {
            return min;
        }
        while (iterator.hasNext()) {
            final float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return e;
            }
            if (min <= e) {
                continue;
            }
            min = e;
        }
        return min;
    }
    
    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Comparable min = iterator.next();
        while (iterator.hasNext()) {
            final Comparable e = iterator.next();
            if (min.compareTo(e) > 0) {
                min = e;
            }
        }
        return (T)min;
    }
    
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object minElem = iterator.next();
        Comparable minValue = (Comparable)selector.invoke((Object)minElem);
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            final Comparable v = (Comparable)selector.invoke((Object)e);
            if (minValue.compareTo(v) > 0) {
                minElem = e;
                minValue = v;
            }
        }
        return (T)minElem;
    }
    
    @Nullable
    public static final <T> T minWith(@NotNull final Sequence<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object min = iterator.next();
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            if (comparator.compare((Object)min, (Object)e) > 0) {
                min = e;
            }
        }
        return (T)min;
    }
    
    public static final <T> boolean none(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return !$receiver.iterator().hasNext();
    }
    
    public static final <T> boolean none(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return false;
            }
        }
        return true;
    }
    
    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T> Sequence<T> onEach(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        return map((Sequence<?>)$receiver, (Function1<? super Object, ? extends T>)new SequencesKt___SequencesKt$onEach.SequencesKt___SequencesKt$onEach$1((Function1)action));
    }
    
    public static final <S, T extends S> S reduce(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        Object accumulator = iterator.next();
        while (iterator.hasNext()) {
            accumulator = operation.invoke((Object)accumulator, iterator.next());
        }
        return (S)accumulator;
    }
    
    public static final <S, T extends S> S reduceIndexed(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        int index = 1;
        Object accumulator = iterator.next();
        while (iterator.hasNext()) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            accumulator = operation.invoke(Integer.valueOf(i), (Object)accumulator, iterator.next());
        }
        return (S)accumulator;
    }
    
    public static final <T> int sumBy(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        int sum = 0;
        for (final Object element : $receiver) {
            sum += selector.invoke((Object)element).intValue();
        }
        return sum;
    }
    
    public static final <T> double sumByDouble(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        double sum = 0.0;
        for (final Object element : $receiver) {
            sum += selector.invoke((Object)element).doubleValue();
        }
        return sum;
    }
    
    @NotNull
    public static final <T> Sequence<T> requireNoNulls(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return map((Sequence<?>)$receiver, (Function1<? super Object, ? extends T>)new SequencesKt___SequencesKt$requireNoNulls.SequencesKt___SequencesKt$requireNoNulls$1((Sequence)$receiver));
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<List<T>> chunked(@NotNull final Sequence<? extends T> $receiver, final int size) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return windowed($receiver, size, size, true);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> chunked(@NotNull final Sequence<? extends T> $receiver, final int size, @NotNull final Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return windowed((Sequence<?>)$receiver, size, size, true, (Function1<? super List<?>, ? extends R>)transform);
    }
    
    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (Sequence<T>)new SequencesKt___SequencesKt$minus.SequencesKt___SequencesKt$minus$1((Sequence)$receiver, (Object)element);
    }
    
    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $receiver, @NotNull final T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements.length == 0) {
            return (Sequence<T>)$receiver;
        }
        return (Sequence<T>)new SequencesKt___SequencesKt$minus.SequencesKt___SequencesKt$minus$2((Sequence)$receiver, (Object[])elements);
    }
    
    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $receiver, @NotNull final Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return (Sequence<T>)new SequencesKt___SequencesKt$minus.SequencesKt___SequencesKt$minus$3((Sequence)$receiver, (Iterable)elements);
    }
    
    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $receiver, @NotNull final Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return (Sequence<T>)new SequencesKt___SequencesKt$minus.SequencesKt___SequencesKt$minus$4((Sequence)$receiver, (Sequence)elements);
    }
    
    @InlineOnly
    private static final <T> Sequence<T> minusElement(@NotNull final Sequence<? extends T> $receiver, final T element) {
        return (Sequence<T>)minus($receiver, (Object)element);
    }
    
    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ArrayList first = new ArrayList();
        final ArrayList second = new ArrayList();
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                first.add(element);
            }
            else {
                second.add(element);
            }
        }
        return new Pair<List<T>, List<T>>(first, second);
    }
    
    @NotNull
    public static final <T> Sequence<T> plus(@NotNull final Sequence<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return SequencesKt__SequencesKt.flatten((Sequence<? extends Sequence<? extends T>>)SequencesKt__SequencesKt.sequenceOf($receiver, SequencesKt__SequencesKt.sequenceOf(element)));
    }
    
    @NotNull
    public static final <T> Sequence<T> plus(@NotNull final Sequence<? extends T> $receiver, @NotNull final T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return plus($receiver, (Iterable<? extends T>)ArraysKt___ArraysJvmKt.asList(elements));
    }
    
    @NotNull
    public static final <T> Sequence<T> plus(@NotNull final Sequence<? extends T> $receiver, @NotNull final Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return SequencesKt__SequencesKt.flatten((Sequence<? extends Sequence<? extends T>>)SequencesKt__SequencesKt.sequenceOf($receiver, CollectionsKt___CollectionsKt.asSequence((Iterable<?>)elements)));
    }
    
    @NotNull
    public static final <T> Sequence<T> plus(@NotNull final Sequence<? extends T> $receiver, @NotNull final Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return SequencesKt__SequencesKt.flatten((Sequence<? extends Sequence<? extends T>>)SequencesKt__SequencesKt.sequenceOf($receiver, elements));
    }
    
    @InlineOnly
    private static final <T> Sequence<T> plusElement(@NotNull final Sequence<? extends T> $receiver, final T element) {
        return (Sequence<T>)plus($receiver, (Object)element);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<List<T>> windowed(@NotNull final Sequence<? extends T> $receiver, final int size, final int step, final boolean partialWindows) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return SlidingWindowKt.windowedSequence($receiver, size, step, partialWindows, false);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> windowed(@NotNull final Sequence<? extends T> $receiver, final int size, final int step, final boolean partialWindows, @NotNull final Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return map((Sequence<?>)SlidingWindowKt.windowedSequence((Sequence<?>)$receiver, size, step, partialWindows, true), (Function1<? super Object, ? extends R>)transform);
    }
    
    @NotNull
    public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull final Sequence<? extends T> $receiver, @NotNull final Sequence<? extends R> other) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        return new MergingSequence<Object, Object, Pair<T, R>>($receiver, other, (Function2<?, ?, ? extends Pair<T, R>>)SequencesKt___SequencesKt$zip.SequencesKt___SequencesKt$zip$1.INSTANCE);
    }
    
    @NotNull
    public static final <T, R, V> Sequence<V> zip(@NotNull final Sequence<? extends T> $receiver, @NotNull final Sequence<? extends R> other, @NotNull final Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new MergingSequence<Object, Object, V>($receiver, other, transform);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<Pair<T, T>> zipWithNext(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return zipWithNext((Sequence<?>)$receiver, (Function2<? super Object, ? super Object, ? extends Pair<T, T>>)SequencesKt___SequencesKt$zipWithNext.SequencesKt___SequencesKt$zipWithNext$1.INSTANCE);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> zipWithNext(@NotNull final Sequence<? extends T> $receiver, @NotNull final Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return SequencesKt__SequenceBuilderKt.sequence((Function2<? super SequenceScope<? super R>, ? super Continuation<? super Unit>, ?>)new SequencesKt___SequencesKt$zipWithNext.SequencesKt___SequencesKt$zipWithNext$2((Sequence)$receiver, (Function2)transform, (Continuation)null));
    }
    
    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull final Sequence<? extends T> $receiver, @NotNull final A buffer, @NotNull final CharSequence separator, @NotNull final CharSequence prefix, @NotNull final CharSequence postfix, final int limit, @NotNull final CharSequence truncated, @Nullable final Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (final Object element : $receiver) {
            if (++count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt__StringBuilderKt.appendElement(buffer, element, (Function1<? super Object, ? extends CharSequence>)transform);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }
    
    @NotNull
    public static final <T> String joinToString(@NotNull final Sequence<? extends T> $receiver, @NotNull final CharSequence separator, @NotNull final CharSequence prefix, @NotNull final CharSequence postfix, final int limit, @NotNull final CharSequence truncated, @Nullable final Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        final String string = joinTo((Sequence<?>)$receiver, (StringBuilder)new StringBuilder(), separator, prefix, postfix, limit, truncated, (Function1<? super Object, ? extends CharSequence>)transform).toString();
        Intrinsics.checkExpressionValueIsNotNull(string, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return string;
    }
    
    @NotNull
    public static final <T> Iterable<T> asIterable(@NotNull final Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return new Iterable<T>($receiver) {
            @NotNull
            @Override
            public Iterator<T> iterator() {
                return this.$this_asIterable$inlined.iterator();
            }
        };
    }
    
    @InlineOnly
    private static final <T> Sequence<T> asSequence(@NotNull final Sequence<? extends T> $receiver) {
        return (Sequence<T>)$receiver;
    }
    
    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull final Sequence<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Byte> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final byte element = iterator.next().byteValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull final Sequence<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Short> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final short element = iterator.next().shortValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull final Sequence<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Integer> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final int element = iterator.next().intValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull final Sequence<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Long> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final long element = iterator.next().longValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull final Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Float> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final float element = iterator.next().floatValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull final Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Double> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final double element = iterator.next().doubleValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull final Sequence<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Byte> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final byte element = iterator.next().byteValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull final Sequence<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Short> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final short element = iterator.next().shortValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull final Sequence<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Integer> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final int element = iterator.next().intValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull final Sequence<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        long sum = 0L;
        final Iterator<Long> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final long element = iterator.next().longValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull final Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        float sum = 0.0f;
        final Iterator<Float> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final float element = iterator.next().floatValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull final Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        final Iterator<Double> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final double element = iterator.next().doubleValue();
            sum += element;
        }
        return sum;
    }
    
    public SequencesKt___SequencesKt() {
    }
}
