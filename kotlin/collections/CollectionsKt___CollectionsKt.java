// 
// Decompiled by Procyon v0.5.36
// 

package kotlin.collections;

import kotlin.jvm.JvmName;
import kotlin.jvm.internal.DoubleCompanionObject;
import java.util.RandomAccess;
import kotlin.sequences.Sequence;
import kotlin.internal.HidesMembers;
import kotlin.Unit;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.functions.Function0;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import kotlin.Pair;
import kotlin.TypeCastException;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending;
import java.util.Comparator;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy;
import kotlin.ranges.IntRange;
import kotlin.jvm.functions.Function2;
import java.util.ArrayList;
import kotlin.SinceKotlin;
import kotlin.random.Random;
import kotlin.internal.PlatformImplementationsKt;
import java.util.NoSuchElementException;
import java.util.ListIterator;
import org.jetbrains.annotations.Nullable;
import java.util.Iterator;
import kotlin.jvm.functions.Function1;
import java.util.Collection;
import kotlin.internal.InlineOnly;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import kotlin.Metadata;

@Metadata(mv = { 1, 1, 13 }, bv = { 1, 0, 3 }, k = 5, xi = 1, d1 = { "\u0000\u00da\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0010\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0014\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00101\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00102\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00103\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a+\u00104\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00107\u001a\u0019\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u001a\u0016\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a9\u0010;\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a$\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a$\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a3\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a#\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a&\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a7\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010H\u001a:\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010I\u001a%\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a(\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a3\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001aH\u0010L\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u001aa\u0010P\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b¢\u0006\u0002\u0010S\u001a$\u0010T\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bU0+\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010V\u001a\u0002HQ\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HQH\u0086\b¢\u0006\u0002\u0010W\u001a3\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HQ\"\u0010\b\u0000\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001aL\u0010\\\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aL\u0010^\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a4\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a2\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a4\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a?\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u001aX\u0010g\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aU\u0010h\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010l\u001aj\u0010m\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0086\b¢\u0006\u0002\u0010o\u001aU\u0010p\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010q\u001aj\u0010r\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0nH\u0086\b¢\u0006\u0002\u0010s\u001a-\u0010t\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u001aB\u0010w\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010v\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0MH\u0086\b\u001a:\u0010x\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010I\u001a%\u0010y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010E\u001aE\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001ax\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001aA\u0010}\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0~\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a)\u0010\u007f\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a)\u0010\u007f\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0081\u0001\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a0\u0010\u0084\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u0087\u0001\u001a\u0003H\u0088\u0001\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010\u0088\u0001*\b0\u0089\u0001j\u0003`\u008a\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u008b\u0001\u001a\u0003H\u0088\u00012\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005¢\u0006\u0003\u0010\u0092\u0001\u001al\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0081\u0001\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a:\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u001aO\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u001aU\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u001an\u0010\u009b\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b¢\u0006\u0002\u0010S\u001ah\u0010\u009c\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010S\u001a@\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aY\u0010\u009e\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aS\u0010\u009f\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a*\u0010 \u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¥\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010¦\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a*\u0010«\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¬\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a.\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010³\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001a\u0017\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a>\u0010µ\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b¢\u0006\u0003\u0010¶\u0001\u001aF\u0010·\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¹\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010º\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¹\u0001\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001a \u0010¼\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b¢\u0006\u0003\u0010½\u0001\u001a)\u0010¼\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010¼\u0001\u001a\u00030¾\u0001H\u0007¢\u0006\u0003\u0010¿\u0001\u001aX\u0010\u00c0\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\u0000\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H\u00c1\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c1\u00010MH\u0086\b¢\u0006\u0003\u0010\u00c2\u0001\u001am\u0010\u00c3\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\u0000\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012H\u00c1\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00c1\u00010nH\u0086\b¢\u0006\u0003\u0010\u00c4\u0001\u001aX\u0010\u00c5\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\u0000\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c1\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c1\u00010MH\u0086\b¢\u0006\u0003\u0010\u00c6\u0001\u001am\u0010\u00c7\u0001\u001a\u0003H\u00c1\u0001\"\u0005\b\u0000\u0010\u00c1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00c1\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010j\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H\u00c1\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H\u00c1\u00010nH\u0086\b¢\u0006\u0003\u0010\u00c8\u0001\u001a#\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020+\u001a\u001d\u0010\u00ca\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001c\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010\u00cb\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001e\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010\u00cc\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a,\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\r\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u00020$0\u0003\u001a'\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\b\u0010\u00ce\u0001\u001a\u00030\u00cf\u0001\u001aC\u0010\u00d0\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aC\u0010\u00d1\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a\"\u0010\u00d2\u0001\u001a\u00020u\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|\u001a(\u0010\u00d3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010\u00d4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00d5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010\u00d6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00d7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001\u001a0\u0010\u00d8\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b\u00da\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\b\u00db\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\b\u00dc\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\b\u00dd\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\b\u00de\u0001\u001a\u0019\u0010\u00d9\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\b\u00df\u0001\u001a.\u0010\u00e0\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010\u00e1\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010\u00e2\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a%\u0010\u00e3\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a4\u0010\u00e4\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a4\u0010\u00e5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0012\u0010\u00e6\u0001\u001a\u00030\u00e7\u0001*\b\u0012\u0004\u0012\u00020\u000109\u001a\u0012\u0010\u00e8\u0001\u001a\u00030\u00e9\u0001*\b\u0012\u0004\u0012\u00020\u001f09\u001a\u0013\u0010\u00ea\u0001\u001a\u00030\u00eb\u0001*\t\u0012\u0005\u0012\u00030\u00ec\u000109\u001a6\u0010\u00ed\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001a\u0012\u0010\u00ee\u0001\u001a\u00030\u00ef\u0001*\b\u0012\u0004\u0012\u00020\u001e09\u001a\u0012\u0010\u00f0\u0001\u001a\u00030\u00f1\u0001*\b\u0012\u0004\u0012\u00020\"09\u001a)\u0010\u00f2\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00f3\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00f4\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00f5\u0001\u001a\u00030\u00f6\u0001*\b\u0012\u0004\u0012\u00020$09\u001a\u001d\u0010\u00f7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00f8\u0001\u001a\u00030\u00f9\u0001*\b\u0012\u0004\u0012\u00020&09\u001a\u001d\u0010\u00fa\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209\u001a\u001d\u0010\u00fa\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00fb\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00fc\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00fd\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u00fe\u0001\u001a\u00030\u00ff\u0001*\b\u0012\u0004\u0012\u00020(09\u001a0\u0010\u0080\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010\u0081\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u0082\u0002\u001a\u00020$2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010\u0081\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u0082\u0002\u001a\u00020$2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u0084\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u0085\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0±\u0001H\u0086\u0004¢\u0006\u0003\u0010²\u0001\u001a~\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0±\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b¢\u0006\u0003\u0010\u0089\u0002\u001aA\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001au\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u001a+\u0010\u008a\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a`\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b¨\u0006\u008b\u0002" }, d2 = { "all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib" }, xs = "kotlin/collections/CollectionsKt")
class CollectionsKt___CollectionsKt extends CollectionsKt___CollectionsJvmKt
{
    @InlineOnly
    private static final <T> T component1(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (T)$receiver.get(0);
    }
    
    @InlineOnly
    private static final <T> T component2(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (T)$receiver.get(1);
    }
    
    @InlineOnly
    private static final <T> T component3(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (T)$receiver.get(2);
    }
    
    @InlineOnly
    private static final <T> T component4(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (T)$receiver.get(3);
    }
    
    @InlineOnly
    private static final <T> T component5(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (T)$receiver.get(4);
    }
    
    public static final <T> boolean contains(@NotNull final Iterable<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return ((Collection)$receiver).contains(element);
        }
        return indexOf($receiver, element) >= 0;
    }
    
    public static final <T> T elementAt(@NotNull final Iterable<? extends T> $receiver, final int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return ((List<T>)$receiver).get(index);
        }
        return (T)elementAtOrElse((Iterable<?>)$receiver, index, (Function1<? super Integer, ?>)new CollectionsKt___CollectionsKt$elementAt.CollectionsKt___CollectionsKt$elementAt$1(index));
    }
    
    @InlineOnly
    private static final <T> T elementAt(@NotNull final List<? extends T> $receiver, final int index) {
        return (T)$receiver.get(index);
    }
    
    public static final <T> T elementAtOrElse(@NotNull final Iterable<? extends T> $receiver, final int index, @NotNull final Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if ($receiver instanceof List) {
            final List<? extends T> $receiver2 = (List<? extends T>)$receiver;
            return (T)((index >= 0 && index <= CollectionsKt__CollectionsKt.getLastIndex((List<?>)$receiver2)) ? $receiver2.get(index) : defaultValue.invoke(index));
        }
        if (index < 0) {
            return (T)defaultValue.invoke(index);
        }
        final Iterator iterator = $receiver.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            final Object element = iterator.next();
            if (index == count++) {
                return (T)element;
            }
        }
        return (T)defaultValue.invoke(index);
    }
    
    @InlineOnly
    private static final <T> T elementAtOrElse(@NotNull final List<? extends T> $receiver, final int index, final Function1<? super Integer, ? extends T> defaultValue) {
        return (T)((index >= 0 && index <= CollectionsKt__CollectionsKt.getLastIndex((List<?>)$receiver)) ? $receiver.get(index) : defaultValue.invoke(index));
    }
    
    @Nullable
    public static final <T> T elementAtOrNull(@NotNull final Iterable<? extends T> $receiver, final int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return getOrNull((List<? extends T>)$receiver, index);
        }
        if (index < 0) {
            return null;
        }
        final Iterator iterator = $receiver.iterator();
        int count = 0;
        while (iterator.hasNext()) {
            final Object element = iterator.next();
            if (index == count++) {
                return (T)element;
            }
        }
        return null;
    }
    
    @InlineOnly
    private static final <T> T elementAtOrNull(@NotNull final List<? extends T> $receiver, final int index) {
        return (T)getOrNull((List<?>)$receiver, index);
    }
    
    @InlineOnly
    private static final <T> T find(@NotNull final Iterable<? extends T> $receiver, final Function1<? super T, Boolean> predicate) {
        final Iterable $receiver$iv = $receiver;
        for (final Object element$iv : $receiver$iv) {
            if (predicate.invoke((Object)element$iv)) {
                final Object o = element$iv;
                return (T)o;
            }
        }
        final Object o = null;
        return (T)o;
    }
    
    @InlineOnly
    private static final <T> T findLast(@NotNull final Iterable<? extends T> $receiver, final Function1<? super T, Boolean> predicate) {
        final Iterable $receiver$iv = $receiver;
        Object last$iv = null;
        for (final Object element$iv : $receiver$iv) {
            if (predicate.invoke((Object)element$iv)) {
                last$iv = element$iv;
            }
        }
        return (T)last$iv;
    }
    
    @InlineOnly
    private static final <T> T findLast(@NotNull final List<? extends T> $receiver, final Function1<? super T, Boolean> predicate) {
        final List $receiver$iv = $receiver;
        final ListIterator iterator$iv = $receiver$iv.listIterator($receiver$iv.size());
        while (iterator$iv.hasPrevious()) {
            final Object element$iv = iterator$iv.previous();
            if (predicate.invoke((Object)element$iv)) {
                final Object o = element$iv;
                return (T)o;
            }
        }
        final Object o = null;
        return (T)o;
    }
    
    public static final <T> T first(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return first((List<? extends T>)$receiver);
        }
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return iterator.next();
    }
    
    public static final <T> T first(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return (T)$receiver.get(0);
    }
    
    public static final <T> T first(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }
    
    @Nullable
    public static final <T> T firstOrNull(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            if (((List)$receiver).isEmpty()) {
                return null;
            }
            return ((List<T>)$receiver).get(0);
        }
        else {
            final Iterator iterator = $receiver.iterator();
            if (!iterator.hasNext()) {
                return null;
            }
            return iterator.next();
        }
    }
    
    @Nullable
    public static final <T> T firstOrNull(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return $receiver.isEmpty() ? null : $receiver.get(0);
    }
    
    @Nullable
    public static final <T> T firstOrNull(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        return null;
    }
    
    @InlineOnly
    private static final <T> T getOrElse(@NotNull final List<? extends T> $receiver, final int index, final Function1<? super Integer, ? extends T> defaultValue) {
        return (T)((index >= 0 && index <= CollectionsKt__CollectionsKt.getLastIndex((List<?>)$receiver)) ? $receiver.get(index) : defaultValue.invoke(index));
    }
    
    @Nullable
    public static final <T> T getOrNull(@NotNull final List<? extends T> $receiver, final int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (index >= 0 && index <= CollectionsKt__CollectionsKt.getLastIndex((List<?>)$receiver)) ? $receiver.get(index) : null;
    }
    
    public static final <T> int indexOf(@NotNull final Iterable<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return ((List<Object>)$receiver).indexOf(element);
        }
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    
    public static final <T> int indexOf(@NotNull final List<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return $receiver.indexOf(element);
    }
    
    public static final <T> int indexOfFirst(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke((Object)item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    
    public static final <T> int indexOfFirst(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (final Object item : $receiver) {
            if (predicate.invoke((Object)item)) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    
    public static final <T> int indexOfLast(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke((Object)item)) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }
    
    public static final <T> int indexOfLast(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        while (iterator.hasPrevious()) {
            if (predicate.invoke(iterator.previous())) {
                return iterator.nextIndex();
            }
        }
        return -1;
    }
    
    public static final <T> T last(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return last((List<? extends T>)$receiver);
        }
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        Object last = iterator.next();
        while (iterator.hasNext()) {
            last = iterator.next();
        }
        return (T)last;
    }
    
    public static final <T> T last(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return (T)$receiver.get(CollectionsKt__CollectionsKt.getLastIndex((List<?>)$receiver));
    }
    
    public static final <T> T last(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object last = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                last = element;
                found = true;
            }
        }
        if (!found) {
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        return (T)last;
    }
    
    public static final <T> T last(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        while (iterator.hasPrevious()) {
            final Object element = iterator.previous();
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }
    
    public static final <T> int lastIndexOf(@NotNull final Iterable<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return ((List<Object>)$receiver).lastIndexOf(element);
        }
        int lastIndex = -1;
        int index = 0;
        for (final Object item : $receiver) {
            if (index < 0) {
                CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(element, item)) {
                lastIndex = index;
            }
            ++index;
        }
        return lastIndex;
    }
    
    public static final <T> int lastIndexOf(@NotNull final List<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return $receiver.lastIndexOf(element);
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return (T)(((List)$receiver).isEmpty() ? null : ((List<Object>)$receiver).get(((List<Object>)$receiver).size() - 1));
        }
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object last = iterator.next();
        while (iterator.hasNext()) {
            last = iterator.next();
        }
        return (T)last;
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return $receiver.isEmpty() ? null : $receiver.get($receiver.size() - 1);
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object last = null;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                last = element;
            }
        }
        return (T)last;
    }
    
    @Nullable
    public static final <T> T lastOrNull(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        while (iterator.hasPrevious()) {
            final Object element = iterator.previous();
            if (predicate.invoke((Object)element)) {
                return (T)element;
            }
        }
        return null;
    }
    
    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final <T> T random(@NotNull final Collection<? extends T> $receiver) {
        return random($receiver, (Random)Random.Default);
    }
    
    @SinceKotlin(version = "1.3")
    public static final <T> T random(@NotNull final Collection<? extends T> $receiver, @NotNull final Random random) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(random, "random");
        if ($receiver.isEmpty()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return elementAt((Iterable<? extends T>)$receiver, random.nextInt($receiver.size()));
    }
    
    public static final <T> T single(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return single((List<? extends T>)$receiver);
        }
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        final Object single = iterator.next();
        if (iterator.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return (T)single;
    }
    
    public static final <T> T single(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        switch ($receiver.size()) {
            case 0: {
                throw new NoSuchElementException("List is empty.");
            }
            case 1: {
                return (T)$receiver.get(0);
            }
            default: {
                throw new IllegalArgumentException("List has more than one element.");
            }
        }
    }
    
    public static final <T> T single(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object single = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                if (found) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                single = element;
                found = true;
            }
        }
        if (!found) {
            throw new NoSuchElementException("Collection contains no element matching the predicate.");
        }
        return (T)single;
    }
    
    @Nullable
    public static final <T> T singleOrNull(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof List) {
            return (T)((((List)$receiver).size() == 1) ? ((List<Object>)$receiver).get(0) : null);
        }
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        final Object single = iterator.next();
        if (iterator.hasNext()) {
            return null;
        }
        return (T)single;
    }
    
    @Nullable
    public static final <T> T singleOrNull(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return ($receiver.size() == 1) ? $receiver.get(0) : null;
    }
    
    @Nullable
    public static final <T> T singleOrNull(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object single = null;
        boolean found = false;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                if (found) {
                    return null;
                }
                single = element;
                found = true;
            }
        }
        if (!found) {
            return null;
        }
        return (T)single;
    }
    
    @NotNull
    public static final <T> List<T> drop(@NotNull final Iterable<? extends T> $receiver, final int n) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: iload_1         /* n */
        //     8: iflt            15
        //    11: iconst_1       
        //    12: goto            16
        //    15: iconst_0       
        //    16: istore_2       
        //    17: iload_2        
        //    18: ifne            65
        //    21: new             Ljava/lang/StringBuilder;
        //    24: dup            
        //    25: invokespecial   java/lang/StringBuilder.<init>:()V
        //    28: ldc_w           "Requested element count "
        //    31: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    34: iload_1         /* n */
        //    35: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    38: ldc_w           " is less than zero."
        //    41: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    44: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    47: astore          4
        //    49: new             Ljava/lang/IllegalArgumentException;
        //    52: dup            
        //    53: aload           4
        //    55: invokevirtual   java/lang/Object.toString:()Ljava/lang/String;
        //    58: invokespecial   java/lang/IllegalArgumentException.<init>:(Ljava/lang/String;)V
        //    61: checkcast       Ljava/lang/Throwable;
        //    64: athrow         
        //    65: iload_1         /* n */
        //    66: ifne            74
        //    69: aload_0         /* $receiver */
        //    70: invokestatic    kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
        //    73: areturn        
        //    74: aload_0         /* $receiver */
        //    75: instanceof      Ljava/util/Collection;
        //    78: ifeq            239
        //    81: aload_0         /* $receiver */
        //    82: checkcast       Ljava/util/Collection;
        //    85: invokeinterface java/util/Collection.size:()I
        //    90: iload_1         /* n */
        //    91: isub           
        //    92: istore_3        /* resultSize */
        //    93: iload_3         /* resultSize */
        //    94: ifgt            101
        //    97: invokestatic    kotlin/collections/CollectionsKt.emptyList:()Ljava/util/List;
        //   100: areturn        
        //   101: iload_3         /* resultSize */
        //   102: iconst_1       
        //   103: if_icmpne       114
        //   106: aload_0         /* $receiver */
        //   107: invokestatic    kotlin/collections/CollectionsKt.last:(Ljava/lang/Iterable;)Ljava/lang/Object;
        //   110: invokestatic    kotlin/collections/CollectionsKt.listOf:(Ljava/lang/Object;)Ljava/util/List;
        //   113: areturn        
        //   114: new             Ljava/util/ArrayList;
        //   117: dup            
        //   118: iload_3         /* resultSize */
        //   119: invokespecial   java/util/ArrayList.<init>:(I)V
        //   122: astore_2        /* list */
        //   123: aload_0         /* $receiver */
        //   124: instanceof      Ljava/util/List;
        //   127: ifeq            247
        //   130: aload_0         /* $receiver */
        //   131: instanceof      Ljava/util/RandomAccess;
        //   134: ifeq            183
        //   137: iload_1         /* n */
        //   138: istore          4
        //   140: aload_0         /* $receiver */
        //   141: checkcast       Ljava/util/Collection;
        //   144: invokeinterface java/util/Collection.size:()I
        //   149: istore          5
        //   151: iload           4
        //   153: iload           5
        //   155: if_icmpge       231
        //   158: aload_2         /* list */
        //   159: aload_0         /* $receiver */
        //   160: checkcast       Ljava/util/List;
        //   163: iload           index
        //   165: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   170: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   173: pop            
        //   174: iinc            index, 1
        //   177: goto            151
        //   180: nop            
        //   181: nop            
        //   182: athrow         
        //   183: aload_0         /* $receiver */
        //   184: checkcast       Ljava/util/List;
        //   187: iload_1         /* n */
        //   188: invokeinterface java/util/List.listIterator:(I)Ljava/util/ListIterator;
        //   193: checkcast       Ljava/util/Iterator;
        //   196: astore          6
        //   198: aload           6
        //   200: astore          5
        //   202: aload           5
        //   204: invokeinterface java/util/Iterator.hasNext:()Z
        //   209: ifeq            231
        //   212: aload           5
        //   214: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   219: astore          item
        //   221: aload_2         /* list */
        //   222: aload           item
        //   224: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   227: pop            
        //   228: goto            202
        //   231: aload_2         /* list */
        //   232: checkcast       Ljava/util/List;
        //   235: areturn        
        //   236: nop            
        //   237: nop            
        //   238: athrow         
        //   239: new             Ljava/util/ArrayList;
        //   242: dup            
        //   243: invokespecial   java/util/ArrayList.<init>:()V
        //   246: astore_2        /* list */
        //   247: iconst_0       
        //   248: istore_3        /* count */
        //   249: aload_0         /* $receiver */
        //   250: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //   255: astore          5
        //   257: aload           5
        //   259: invokeinterface java/util/Iterator.hasNext:()Z
        //   264: ifeq            294
        //   267: aload           5
        //   269: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   274: astore          item
        //   276: iload_3         /* count */
        //   277: iinc            count, 1
        //   280: iload_1         /* n */
        //   281: if_icmplt       291
        //   284: aload_2         /* list */
        //   285: aload           item
        //   287: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   290: pop            
        //   291: goto            257
        //   294: aload_2         /* list */
        //   295: checkcast       Ljava/util/List;
        //   298: invokestatic    kotlin/collections/CollectionsKt.optimizeReadOnlyList:(Ljava/util/List;)Ljava/util/List;
        //   301: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;I)Ljava/util/List<TT;>;
        //    StackMapTable: 00 11 0F 40 01 FC 00 30 01 08 FC 00 1A 01 0C FF 00 24 00 06 07 01 46 01 07 01 FD 01 01 01 00 00 FF 00 1C 00 00 00 01 07 01 62 FF 00 02 00 04 07 01 46 01 07 01 FD 01 00 00 FE 00 12 00 07 01 4C 07 01 4C F8 00 1C FF 00 04 00 00 00 01 07 01 62 FE 00 02 07 01 46 01 01 FF 00 07 00 03 07 01 46 01 07 01 FD 00 00 FE 00 09 01 00 07 01 4C FF 00 21 00 06 07 01 46 01 07 01 FD 01 07 01 44 07 01 4C 00 00 FF 00 02 00 06 07 01 46 01 07 01 FD 01 00 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> dropLast(@NotNull final List<? extends T> $receiver, final int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (n < 0) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        return take((Iterable<? extends T>)$receiver, RangesKt___RangesKt.coerceAtLeast($receiver.size() - n, 0));
    }
    
    @NotNull
    public static final <T> List<T> dropLastWhile(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (!$receiver.isEmpty()) {
            final ListIterator iterator = $receiver.listIterator($receiver.size());
            while (iterator.hasPrevious()) {
                if (!predicate.invoke(iterator.previous())) {
                    return take((Iterable<? extends T>)$receiver, iterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt__CollectionsKt.emptyList();
    }
    
    @NotNull
    public static final <T> List<T> dropWhile(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        boolean yielding = false;
        final ArrayList list = new ArrayList();
        for (final Object item : $receiver) {
            if (yielding) {
                list.add(item);
            }
            else {
                if (predicate.invoke((Object)item)) {
                    continue;
                }
                list.add(item);
                yielding = true;
            }
        }
        return (List<T>)list;
    }
    
    @NotNull
    public static final <T> List<T> filter(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* predicate */
        //     8: ldc_w           "predicate"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          5
        //    36: aload           5
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            85
        //    46: aload           5
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          element$iv
        //    55: aload_1         /* predicate */
        //    56: aload           element$iv
        //    58: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    63: checkcast       Ljava/lang/Boolean;
        //    66: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //    69: ifeq            36
        //    72: aload           destination$iv
        //    74: aload           element$iv
        //    76: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    81: pop            
        //    82: goto            36
        //    85: aload           destination$iv
        //    87: checkcast       Ljava/util/List;
        //    90: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;Ljava/lang/Boolean;>;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 02 FF 00 24 00 06 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 4C 00 00 30
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> filterIndexed(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, Boolean> predicate) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* predicate */
        //     8: ldc_w           "predicate"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: astore          $receiver$iv$iv
        //    31: iconst_0       
        //    32: istore          index$iv$iv
        //    34: aload           $receiver$iv$iv
        //    36: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    41: astore          7
        //    43: aload           7
        //    45: invokeinterface java/util/Iterator.hasNext:()Z
        //    50: ifeq            151
        //    53: aload           7
        //    55: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    60: astore          item$iv$iv
        //    62: iload           index$iv$iv
        //    64: iinc            index$iv$iv, 1
        //    67: istore          9
        //    69: iload           9
        //    71: ifge            103
        //    74: iconst_1       
        //    75: iconst_3       
        //    76: iconst_0       
        //    77: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    80: ifeq            89
        //    83: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    86: goto            103
        //    89: new             Ljava/lang/ArithmeticException;
        //    92: dup            
        //    93: ldc_w           "Index overflow has happened."
        //    96: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    99: checkcast       Ljava/lang/Throwable;
        //   102: athrow         
        //   103: iload           9
        //   105: istore          10
        //   107: iload           10
        //   109: aload           item$iv$iv
        //   111: astore          11
        //   113: istore          index$iv
        //   115: aload_1         /* predicate */
        //   116: iload           index$iv
        //   118: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   121: aload           element$iv
        //   123: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   128: checkcast       Ljava/lang/Boolean;
        //   131: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //   134: ifeq            147
        //   137: aload           destination$iv
        //   139: aload           element$iv
        //   141: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   146: pop            
        //   147: nop            
        //   148: goto            43
        //   151: nop            
        //   152: aload           destination$iv
        //   154: checkcast       Ljava/util/List;
        //   157: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;Ljava/lang/Boolean;>;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 05 FF 00 2B 00 08 07 01 46 07 02 21 00 07 01 46 07 01 22 07 01 46 01 07 01 4C 00 00 FD 00 2D 07 01 44 01 0D FE 00 2B 01 07 01 44 01 FF 00 03 00 08 07 01 46 07 02 21 00 07 01 46 07 01 22 07 01 46 01 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, Boolean> predicate) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* destination */
        //     8: ldc_w           "destination"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_2         /* predicate */
        //    15: ldc_w           "predicate"
        //    18: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    21: aload_0         /* $receiver */
        //    22: astore          $receiver$iv
        //    24: iconst_0       
        //    25: istore          index$iv
        //    27: aload           $receiver$iv
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          6
        //    36: aload           6
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            143
        //    46: aload           6
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          item$iv
        //    55: iload           index$iv
        //    57: iinc            index$iv, 1
        //    60: istore          8
        //    62: iload           8
        //    64: ifge            96
        //    67: iconst_1       
        //    68: iconst_3       
        //    69: iconst_0       
        //    70: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    73: ifeq            82
        //    76: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    79: goto            96
        //    82: new             Ljava/lang/ArithmeticException;
        //    85: dup            
        //    86: ldc_w           "Index overflow has happened."
        //    89: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    92: checkcast       Ljava/lang/Throwable;
        //    95: athrow         
        //    96: iload           8
        //    98: istore          9
        //   100: iload           9
        //   102: aload           item$iv
        //   104: astore          10
        //   106: istore          index
        //   108: aload_2         /* predicate */
        //   109: iload           index
        //   111: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   114: aload           element
        //   116: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   121: checkcast       Ljava/lang/Boolean;
        //   124: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //   127: ifeq            139
        //   130: aload_1         /* destination */
        //   131: aload           element
        //   133: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   138: pop            
        //   139: nop            
        //   140: goto            36
        //   143: nop            
        //   144: aload_1         /* destination */
        //   145: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;C::Ljava/util/Collection<-TT;>;>(Ljava/lang/Iterable<+TT;>;TC;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;Ljava/lang/Boolean;>;)TC;
        //    StackMapTable: 00 05 FF 00 24 00 07 07 01 46 07 01 22 07 02 21 00 07 01 46 01 07 01 4C 00 00 FD 00 2D 07 01 44 01 0D FE 00 2A 01 07 01 44 01 FF 00 03 00 07 07 01 46 07 01 22 07 02 21 00 07 01 46 01 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static final <R> List<R> filterIsInstance(@NotNull final Iterable<?> $receiver) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: astore_2       
        //     2: new             Ljava/util/ArrayList;
        //     5: dup            
        //     6: invokespecial   java/util/ArrayList.<init>:()V
        //     9: checkcast       Ljava/util/Collection;
        //    12: astore_3        /* destination$iv */
        //    13: aload_2         /* $receiver$iv */
        //    14: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    19: astore          4
        //    21: aload           4
        //    23: invokeinterface java/util/Iterator.hasNext:()Z
        //    28: ifeq            67
        //    31: aload           4
        //    33: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    38: astore          element$iv
        //    40: aload           element$iv
        //    42: iconst_3       
        //    43: ldc_w           "R"
        //    46: invokestatic    kotlin/jvm/internal/Intrinsics.reifiedOperationMarker:(ILjava/lang/String;)V
        //    49: instanceof      Ljava/lang/Object;
        //    52: ifeq            21
        //    55: aload_3         /* destination$iv */
        //    56: aload           element$iv
        //    58: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    63: pop            
        //    64: goto            21
        //    67: aload_3         /* destination$iv */
        //    68: checkcast       Ljava/util/List;
        //    71: areturn        
        //    Signature:
        //  <R:Ljava/lang/Object;>(Ljava/lang/Iterable<*>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 02 FF 00 15 00 05 07 01 46 00 07 01 46 07 01 22 07 01 4C 00 00 2D
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull final Iterable<?> $receiver, final C destination) {
        for (final Object next : $receiver) {
            final Object element = next;
            Intrinsics.reifiedOperationMarker(3, "R");
            if (next instanceof Object) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T> List<T> filterNot(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* predicate */
        //     8: ldc_w           "predicate"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          5
        //    36: aload           5
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            85
        //    46: aload           5
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          element$iv
        //    55: aload_1         /* predicate */
        //    56: aload           element$iv
        //    58: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    63: checkcast       Ljava/lang/Boolean;
        //    66: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //    69: ifne            36
        //    72: aload           destination$iv
        //    74: aload           element$iv
        //    76: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    81: pop            
        //    82: goto            36
        //    85: aload           destination$iv
        //    87: checkcast       Ljava/util/List;
        //    90: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;Ljava/lang/Boolean;>;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 02 FF 00 24 00 06 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 4C 00 00 30
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> filterNotNull(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return filterNotNullTo((Iterable<?>)$receiver, (ArrayList<T>)new ArrayList<T>());
    }
    
    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (final Object element : $receiver) {
            if (element != null) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (!predicate.invoke((Object)element)) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                destination.add((Object)element);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T> List<T> slice(@NotNull final List<? extends T> $receiver, @NotNull final IntRange indices) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        if (indices.isEmpty()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        return toList((Iterable<? extends T>)$receiver.subList(indices.getStart(), indices.getEndInclusive() + 1));
    }
    
    @NotNull
    public static final <T> List<T> slice(@NotNull final List<? extends T> $receiver, @NotNull final Iterable<Integer> indices) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        final int size = CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)indices, 10);
        if (size == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        final ArrayList list = new ArrayList(size);
        final Iterator<? extends T> iterator = indices.iterator();
        while (iterator.hasNext()) {
            final int index = ((Number)iterator.next()).intValue();
            list.add($receiver.get(index));
        }
        return (List<T>)list;
    }
    
    @NotNull
    public static final <T> List<T> take(@NotNull final Iterable<? extends T> $receiver, final int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (n < 0) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        if ($receiver instanceof Collection) {
            if (n >= ((Collection)$receiver).size()) {
                return toList($receiver);
            }
            if (n == 1) {
                return CollectionsKt__CollectionsJVMKt.listOf(first($receiver));
            }
        }
        int count = 0;
        final ArrayList list = new ArrayList(n);
        for (final Object item : $receiver) {
            if (count++ == n) {
                break;
            }
            list.add(item);
        }
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList((List<? extends T>)list);
    }
    
    @NotNull
    public static final <T> List<T> takeLast(@NotNull final List<? extends T> $receiver, final int n) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: iload_1         /* n */
        //     8: iflt            15
        //    11: iconst_1       
        //    12: goto            16
        //    15: iconst_0       
        //    16: istore_2       
        //    17: iload_2        
        //    18: ifne            65
        //    21: new             Ljava/lang/StringBuilder;
        //    24: dup            
        //    25: invokespecial   java/lang/StringBuilder.<init>:()V
        //    28: ldc_w           "Requested element count "
        //    31: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    34: iload_1         /* n */
        //    35: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        //    38: ldc_w           " is less than zero."
        //    41: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //    44: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;
        //    47: astore          4
        //    49: new             Ljava/lang/IllegalArgumentException;
        //    52: dup            
        //    53: aload           4
        //    55: invokevirtual   java/lang/Object.toString:()Ljava/lang/String;
        //    58: invokespecial   java/lang/IllegalArgumentException.<init>:(Ljava/lang/String;)V
        //    61: checkcast       Ljava/lang/Throwable;
        //    64: athrow         
        //    65: iload_1         /* n */
        //    66: ifne            73
        //    69: invokestatic    kotlin/collections/CollectionsKt.emptyList:()Ljava/util/List;
        //    72: areturn        
        //    73: aload_0         /* $receiver */
        //    74: invokeinterface java/util/List.size:()I
        //    79: istore_2        /* size */
        //    80: iload_1         /* n */
        //    81: iload_2         /* size */
        //    82: if_icmplt       93
        //    85: aload_0         /* $receiver */
        //    86: checkcast       Ljava/lang/Iterable;
        //    89: invokestatic    kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
        //    92: areturn        
        //    93: iload_1         /* n */
        //    94: iconst_1       
        //    95: if_icmpne       106
        //    98: aload_0         /* $receiver */
        //    99: invokestatic    kotlin/collections/CollectionsKt.last:(Ljava/util/List;)Ljava/lang/Object;
        //   102: invokestatic    kotlin/collections/CollectionsKt.listOf:(Ljava/lang/Object;)Ljava/util/List;
        //   105: areturn        
        //   106: new             Ljava/util/ArrayList;
        //   109: dup            
        //   110: iload_1         /* n */
        //   111: invokespecial   java/util/ArrayList.<init>:(I)V
        //   114: astore_3        /* list */
        //   115: aload_0         /* $receiver */
        //   116: instanceof      Ljava/util/RandomAccess;
        //   119: ifeq            159
        //   122: iload_2         /* size */
        //   123: iload_1         /* n */
        //   124: isub           
        //   125: istore          4
        //   127: iload_2         /* size */
        //   128: istore          5
        //   130: iload           4
        //   132: iload           5
        //   134: if_icmpge       206
        //   137: aload_3         /* list */
        //   138: aload_0         /* $receiver */
        //   139: iload           index
        //   141: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   146: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   149: pop            
        //   150: iinc            index, 1
        //   153: goto            130
        //   156: nop            
        //   157: nop            
        //   158: athrow         
        //   159: aload_0         /* $receiver */
        //   160: iload_2         /* size */
        //   161: iload_1         /* n */
        //   162: isub           
        //   163: invokeinterface java/util/List.listIterator:(I)Ljava/util/ListIterator;
        //   168: checkcast       Ljava/util/Iterator;
        //   171: astore          6
        //   173: aload           6
        //   175: astore          5
        //   177: aload           5
        //   179: invokeinterface java/util/Iterator.hasNext:()Z
        //   184: ifeq            206
        //   187: aload           5
        //   189: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   194: astore          item
        //   196: aload_3         /* list */
        //   197: aload           item
        //   199: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   202: pop            
        //   203: goto            177
        //   206: aload_3         /* list */
        //   207: checkcast       Ljava/util/List;
        //   210: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/util/List<+TT;>;I)Ljava/util/List<TT;>;
        //    StackMapTable: 00 0B 0F 40 01 FC 00 30 01 07 13 0C FE 00 17 07 01 FD 01 01 FF 00 19 00 00 00 01 07 01 62 FF 00 02 00 04 07 01 14 01 01 07 01 FD 00 00 FE 00 11 00 07 01 4C 07 01 4C F8 00 1C
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> takeLastWhile(@NotNull final List<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ($receiver.isEmpty()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        while (iterator.hasPrevious()) {
            if (!predicate.invoke(iterator.previous())) {
                iterator.next();
                final int expectedSize = $receiver.size() - iterator.nextIndex();
                if (expectedSize == 0) {
                    return CollectionsKt__CollectionsKt.emptyList();
                }
                final ArrayList $receiver2;
                final ArrayList list = $receiver2 = new ArrayList(expectedSize);
                while (iterator.hasNext()) {
                    $receiver2.add(iterator.next());
                }
                return (ArrayList<T>)list;
            }
        }
        return toList((Iterable<? extends T>)$receiver);
    }
    
    @NotNull
    public static final <T> List<T> takeWhile(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ArrayList list = new ArrayList();
        for (final Object item : $receiver) {
            if (!predicate.invoke((Object)item)) {
                break;
            }
            list.add(item);
        }
        return (List<T>)list;
    }
    
    @NotNull
    public static final <T> List<T> reversed(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection && ((Collection)$receiver).size() <= 1) {
            return (List<T>)toList((Iterable<?>)$receiver);
        }
        final List list = toMutableList((Iterable<?>)$receiver);
        CollectionsKt___CollectionsJvmKt.reverse((List<Object>)list);
        return (List<T>)list;
    }
    
    public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull final List<T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if ($receiver.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
                @Override
                public final int compare(final T a, final T b) {
                    return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(a), (Comparable)this.$selector.invoke(b));
                }
            });
        }
    }
    
    public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull final List<T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if ($receiver.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
                @Override
                public final int compare(final T a, final T b) {
                    return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(b), (Comparable)this.$selector.invoke(a));
                }
            });
        }
    }
    
    public static final <T extends Comparable<? super T>> void sortDescending(@NotNull final List<T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        CollectionsKt__MutableCollectionsJVMKt.sortWith($receiver, ComparisonsKt__ComparisonsKt.reverseOrder());
    }
    
    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if (!($receiver instanceof Collection)) {
            final List $receiver2;
            final List list = $receiver2 = toMutableList((Iterable<?>)$receiver);
            CollectionsKt__MutableCollectionsJVMKt.sort((List<Comparable>)$receiver2);
            return (List<T>)list;
        }
        if (((Collection<? extends T>)$receiver).size() <= 1) {
            return (List<T>)toList((Iterable<?>)$receiver);
        }
        final Collection thisCollection$iv;
        final Collection $receiver$iv = thisCollection$iv = (Collection<? extends T>)$receiver;
        final T[] array = thisCollection$iv.toArray(new Comparable[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        final T[] array2 = array;
        final T[] array3;
        final Comparable[] $receiver3 = array3 = array2;
        if (array3 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
        }
        ArraysKt___ArraysJvmKt.sort((T[])array3);
        return ArraysKt___ArraysJvmKt.asList(array2);
    }
    
    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
            @Override
            public final int compare(final T a, final T b) {
                return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(a), (Comparable)this.$selector.invoke(b));
            }
        });
    }
    
    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, (Comparator<? super T>)new Comparator<Object>(selector) {
            @Override
            public final int compare(final T a, final T b) {
                return ComparisonsKt__ComparisonsKt.compareValues(this.$selector.invoke(b), (Comparable)this.$selector.invoke(a));
            }
        });
    }
    
    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return sortedWith($receiver, ComparisonsKt__ComparisonsKt.reverseOrder());
    }
    
    @NotNull
    public static final <T> List<T> sortedWith(@NotNull final Iterable<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        if (!($receiver instanceof Collection)) {
            final List $receiver2;
            final List list = $receiver2 = toMutableList((Iterable<?>)$receiver);
            CollectionsKt__MutableCollectionsJVMKt.sortWith((List<Object>)$receiver2, (Comparator<? super Object>)comparator);
            return (List<T>)list;
        }
        if (((Collection<? extends T>)$receiver).size() <= 1) {
            return toList($receiver);
        }
        final Collection thisCollection$iv;
        final Collection $receiver$iv = thisCollection$iv = (Collection<? extends T>)$receiver;
        final T[] array = thisCollection$iv.toArray(new Object[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        final Object[] $receiver3;
        final Object[] $receiver4 = $receiver3 = array;
        ArraysKt___ArraysJvmKt.sortWith($receiver3, (Comparator<? super Object>)comparator);
        return ArraysKt___ArraysJvmKt.asList($receiver4);
    }
    
    @NotNull
    public static final boolean[] toBooleanArray(@NotNull final Collection<Boolean> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final boolean[] result = new boolean[$receiver.size()];
        int index = 0;
        for (final boolean element : $receiver) {
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final byte[] toByteArray(@NotNull final Collection<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final byte[] result = new byte[$receiver.size()];
        int index = 0;
        final Iterator<Byte> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final byte element = iterator.next().byteValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final char[] toCharArray(@NotNull final Collection<Character> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final char[] result = new char[$receiver.size()];
        int index = 0;
        for (final char element : $receiver) {
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final double[] toDoubleArray(@NotNull final Collection<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final double[] result = new double[$receiver.size()];
        int index = 0;
        final Iterator<Double> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final double element = iterator.next().doubleValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final float[] toFloatArray(@NotNull final Collection<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final float[] result = new float[$receiver.size()];
        int index = 0;
        final Iterator<Float> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final float element = iterator.next().floatValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final int[] toIntArray(@NotNull final Collection<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final int[] result = new int[$receiver.size()];
        int index = 0;
        final Iterator<Integer> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final int element = iterator.next().intValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final long[] toLongArray(@NotNull final Collection<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final long[] result = new long[$receiver.size()];
        int index = 0;
        final Iterator<Long> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final long element = iterator.next().longValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final short[] toShortArray(@NotNull final Collection<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final short[] result = new short[$receiver.size()];
        int index = 0;
        final Iterator<Short> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final short element = iterator.next().shortValue();
            result[index++] = element;
        }
        return result;
    }
    
    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: bipush          10
        //    17: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    20: invokestatic    kotlin/collections/MapsKt.mapCapacity:(I)I
        //    23: bipush          16
        //    25: invokestatic    kotlin/ranges/RangesKt.coerceAtLeast:(II)I
        //    28: istore_3        /* capacity */
        //    29: aload_0         /* $receiver */
        //    30: astore          4
        //    32: new             Ljava/util/LinkedHashMap;
        //    35: dup            
        //    36: iload_3         /* capacity */
        //    37: invokespecial   java/util/LinkedHashMap.<init>:(I)V
        //    40: checkcast       Ljava/util/Map;
        //    43: astore          destination$iv
        //    45: aload           $receiver$iv
        //    47: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    52: astore          6
        //    54: aload           6
        //    56: invokeinterface java/util/Iterator.hasNext:()Z
        //    61: ifeq            111
        //    64: aload           6
        //    66: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    71: astore          element$iv
        //    73: aload           destination$iv
        //    75: astore          8
        //    77: aload_1         /* transform */
        //    78: aload           element$iv
        //    80: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    85: checkcast       Lkotlin/Pair;
        //    88: astore          9
        //    90: aload           8
        //    92: aload           9
        //    94: invokevirtual   kotlin/Pair.getFirst:()Ljava/lang/Object;
        //    97: aload           9
        //    99: invokevirtual   kotlin/Pair.getSecond:()Ljava/lang/Object;
        //   102: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   107: pop            
        //   108: goto            54
        //   111: aload           destination$iv
        //   113: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+Lkotlin/Pair<+TK;+TV;>;>;)Ljava/util/Map<TK;TV;>;
        //    StackMapTable: 00 02 FF 00 36 00 07 07 01 46 07 01 30 00 01 07 01 46 07 02 E8 07 01 4C 00 00 38
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* keySelector */
        //     8: ldc_w           "keySelector"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: bipush          10
        //    17: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    20: invokestatic    kotlin/collections/MapsKt.mapCapacity:(I)I
        //    23: bipush          16
        //    25: invokestatic    kotlin/ranges/RangesKt.coerceAtLeast:(II)I
        //    28: istore_3        /* capacity */
        //    29: aload_0         /* $receiver */
        //    30: astore          4
        //    32: new             Ljava/util/LinkedHashMap;
        //    35: dup            
        //    36: iload_3         /* capacity */
        //    37: invokespecial   java/util/LinkedHashMap.<init>:(I)V
        //    40: checkcast       Ljava/util/Map;
        //    43: astore          destination$iv
        //    45: aload           $receiver$iv
        //    47: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    52: astore          6
        //    54: aload           6
        //    56: invokeinterface java/util/Iterator.hasNext:()Z
        //    61: ifeq            94
        //    64: aload           6
        //    66: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    71: astore          element$iv
        //    73: aload           destination$iv
        //    75: aload_1         /* keySelector */
        //    76: aload           element$iv
        //    78: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    83: aload           element$iv
        //    85: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //    90: pop            
        //    91: goto            54
        //    94: aload           destination$iv
        //    96: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;)Ljava/util/Map<TK;TT;>;
        //    StackMapTable: 00 02 FF 00 36 00 07 07 01 46 07 01 30 00 01 07 01 46 07 02 E8 07 01 4C 00 00 27
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* keySelector */
        //     8: ldc_w           "keySelector"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_2         /* valueTransform */
        //    15: ldc_w           "valueTransform"
        //    18: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    21: aload_0         /* $receiver */
        //    22: bipush          10
        //    24: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    27: invokestatic    kotlin/collections/MapsKt.mapCapacity:(I)I
        //    30: bipush          16
        //    32: invokestatic    kotlin/ranges/RangesKt.coerceAtLeast:(II)I
        //    35: istore          capacity
        //    37: aload_0         /* $receiver */
        //    38: astore          5
        //    40: new             Ljava/util/LinkedHashMap;
        //    43: dup            
        //    44: iload           capacity
        //    46: invokespecial   java/util/LinkedHashMap.<init>:(I)V
        //    49: checkcast       Ljava/util/Map;
        //    52: astore          destination$iv
        //    54: aload           $receiver$iv
        //    56: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    61: astore          7
        //    63: aload           7
        //    65: invokeinterface java/util/Iterator.hasNext:()Z
        //    70: ifeq            109
        //    73: aload           7
        //    75: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    80: astore          element$iv
        //    82: aload           destination$iv
        //    84: aload_1         /* keySelector */
        //    85: aload           element$iv
        //    87: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    92: aload_2         /* valueTransform */
        //    93: aload           element$iv
        //    95: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //   100: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   105: pop            
        //   106: goto            63
        //   109: aload           destination$iv
        //   111: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;Lkotlin/jvm/functions/Function1<-TT;+TV;>;)Ljava/util/Map<TK;TV;>;
        //    StackMapTable: 00 02 FF 00 3F 00 08 07 01 46 07 01 30 07 01 30 00 01 07 01 46 07 02 E8 07 01 4C 00 00 2D
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (final Object element : $receiver) {
            destination.put((Object)keySelector.invoke((Object)element), (Object)element);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (final Object element : $receiver) {
            destination.put((Object)keySelector.invoke((Object)element), (Object)valueTransform.invoke((Object)element));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object element : $receiver) {
            final Pair pair = (Pair)transform.invoke((Object)element);
            destination.put(pair.getFirst(), (Object)pair.getSecond());
        }
        return destination;
    }
    
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull final Iterable<? extends K> $receiver, @NotNull final Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        final LinkedHashMap result = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)$receiver, 10)), 16));
        final Iterable $receiver$iv = $receiver;
        for (final Object element$iv : $receiver$iv) {
            result.put(element$iv, valueSelector.invoke((Object)element$iv));
        }
        return (Map<K, V>)result;
    }
    
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull final Iterable<? extends K> $receiver, @NotNull final M destination, @NotNull final Function1<? super K, ? extends V> valueSelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
        for (final Object element : $receiver) {
            destination.put((Object)element, (Object)valueSelector.invoke((Object)element));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (final Object item : $receiver) {
            destination.add((Object)item);
        }
        return destination;
    }
    
    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return toCollection((Iterable<?>)$receiver, (HashSet<T>)new HashSet<T>(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)$receiver, 12))));
    }
    
    @NotNull
    public static final <T> List<T> toList(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            List<T> list = null;
            switch (((Collection)$receiver).size()) {
                case 0: {
                    list = CollectionsKt__CollectionsKt.emptyList();
                    break;
                }
                case 1: {
                    list = CollectionsKt__CollectionsJVMKt.listOf(($receiver instanceof List) ? ((List<Object>)$receiver).get(0) : $receiver.iterator().next());
                    break;
                }
                default: {
                    list = toMutableList((Collection<? extends T>)$receiver);
                    break;
                }
            }
            return list;
        }
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList((Iterable<? extends T>)$receiver));
    }
    
    @NotNull
    public static final <T> List<T> toMutableList(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return toMutableList((Collection<? extends T>)$receiver);
        }
        return toCollection((Iterable<?>)$receiver, (ArrayList<T>)new ArrayList<T>());
    }
    
    @NotNull
    public static final <T> List<T> toMutableList(@NotNull final Collection<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return new ArrayList<T>($receiver);
    }
    
    @NotNull
    public static final <T> Set<T> toSet(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            Set<T> set = null;
            switch (((Collection)$receiver).size()) {
                case 0: {
                    set = SetsKt__SetsKt.emptySet();
                    break;
                }
                case 1: {
                    set = SetsKt__SetsJVMKt.setOf(($receiver instanceof List) ? ((List<Object>)$receiver).get(0) : $receiver.iterator().next());
                    break;
                }
                default: {
                    set = toCollection((Iterable<?>)$receiver, (LinkedHashSet<T>)new LinkedHashSet<Object>(MapsKt__MapsKt.mapCapacity(((List<Object>)$receiver).size())));
                    break;
                }
            }
            return set;
        }
        return SetsKt__SetsKt.optimizeReadOnlySet((Set<? extends T>)toCollection((Iterable<?>)$receiver, (LinkedHashSet<? extends T>)new LinkedHashSet<Object>()));
    }
    
    @NotNull
    public static final <T, R> List<R> flatMap(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends Iterable<? extends R>> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          5
        //    36: aload           5
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            79
        //    46: aload           5
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          element$iv
        //    55: aload_1         /* transform */
        //    56: aload           element$iv
        //    58: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    63: checkcast       Ljava/lang/Iterable;
        //    66: astore          list$iv
        //    68: aload           destination$iv
        //    70: aload           list$iv
        //    72: invokestatic    kotlin/collections/CollectionsKt.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z
        //    75: pop            
        //    76: goto            36
        //    79: aload           destination$iv
        //    81: checkcast       Ljava/util/List;
        //    84: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+Ljava/lang/Iterable<+TR;>;>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 02 FF 00 24 00 06 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 4C 00 00 2A
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object element : $receiver) {
            final Iterable list = (Iterable)transform.invoke((Object)element);
            CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)destination, (Iterable<?>)list);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* keySelector */
        //     8: ldc_w           "keySelector"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/LinkedHashMap;
        //    19: dup            
        //    20: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    23: checkcast       Ljava/util/Map;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          5
        //    36: aload           5
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            133
        //    46: aload           5
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          element$iv
        //    55: aload_1         /* keySelector */
        //    56: aload           element$iv
        //    58: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    63: astore          key$iv
        //    65: aload           destination$iv
        //    67: astore          $receiver$iv$iv
        //    69: aload           $receiver$iv$iv
        //    71: aload           key$iv
        //    73: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    78: astore          value$iv$iv
        //    80: aload           value$iv$iv
        //    82: ifnonnull       112
        //    85: nop            
        //    86: new             Ljava/util/ArrayList;
        //    89: dup            
        //    90: invokespecial   java/util/ArrayList.<init>:()V
        //    93: astore          answer$iv$iv
        //    95: aload           $receiver$iv$iv
        //    97: aload           key$iv
        //    99: aload           answer$iv$iv
        //   101: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   106: pop            
        //   107: aload           answer$iv$iv
        //   109: goto            114
        //   112: aload           value$iv$iv
        //   114: nop            
        //   115: checkcast       Ljava/util/List;
        //   118: astore          list$iv
        //   120: aload           list$iv
        //   122: aload           element$iv
        //   124: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   129: pop            
        //   130: goto            36
        //   133: aload           destination$iv
        //   135: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;)Ljava/util/Map<TK;Ljava/util/List<TT;>;>;
        //    StackMapTable: 00 04 FF 00 24 00 06 07 01 46 07 01 30 00 07 01 46 07 02 E8 07 01 4C 00 00 FF 00 4B 00 0A 07 01 46 07 01 30 00 07 01 46 07 02 E8 07 01 4C 07 01 44 07 01 44 07 02 E8 07 01 44 00 00 41 07 01 44 FF 00 12 00 06 07 01 46 07 01 30 00 07 01 46 07 02 E8 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* keySelector */
        //     8: ldc_w           "keySelector"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_2         /* valueTransform */
        //    15: ldc_w           "valueTransform"
        //    18: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    21: aload_0         /* $receiver */
        //    22: astore          4
        //    24: new             Ljava/util/LinkedHashMap;
        //    27: dup            
        //    28: invokespecial   java/util/LinkedHashMap.<init>:()V
        //    31: checkcast       Ljava/util/Map;
        //    34: astore          destination$iv
        //    36: aload           $receiver$iv
        //    38: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    43: astore          6
        //    45: aload           6
        //    47: invokeinterface java/util/Iterator.hasNext:()Z
        //    52: ifeq            148
        //    55: aload           6
        //    57: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    62: astore          element$iv
        //    64: aload_1         /* keySelector */
        //    65: aload           element$iv
        //    67: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    72: astore          key$iv
        //    74: aload           destination$iv
        //    76: astore          $receiver$iv$iv
        //    78: aload           $receiver$iv$iv
        //    80: aload           key$iv
        //    82: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    87: astore          value$iv$iv
        //    89: aload           value$iv$iv
        //    91: ifnonnull       121
        //    94: nop            
        //    95: new             Ljava/util/ArrayList;
        //    98: dup            
        //    99: invokespecial   java/util/ArrayList.<init>:()V
        //   102: astore          answer$iv$iv
        //   104: aload           $receiver$iv$iv
        //   106: aload           key$iv
        //   108: aload           answer$iv$iv
        //   110: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   115: pop            
        //   116: aload           answer$iv$iv
        //   118: goto            123
        //   121: aload           value$iv$iv
        //   123: nop            
        //   124: checkcast       Ljava/util/List;
        //   127: astore          list$iv
        //   129: aload           list$iv
        //   131: aload_2         /* valueTransform */
        //   132: aload           element$iv
        //   134: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //   139: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   144: pop            
        //   145: goto            45
        //   148: aload           destination$iv
        //   150: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TK;>;Lkotlin/jvm/functions/Function1<-TT;+TV;>;)Ljava/util/Map<TK;Ljava/util/List<TV;>;>;
        //    StackMapTable: 00 04 FF 00 2D 00 07 07 01 46 07 01 30 07 01 30 00 07 01 46 07 02 E8 07 01 4C 00 00 FF 00 4B 00 0B 07 01 46 07 01 30 07 01 30 00 07 01 46 07 02 E8 07 01 4C 07 01 44 07 01 44 07 02 E8 07 01 44 00 00 41 07 01 44 FF 00 18 00 07 07 01 46 07 01 30 07 01 30 00 07 01 46 07 02 E8 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (final Object element : $receiver) {
            final Object key = keySelector.invoke((Object)element);
            final Map $receiver$iv = destination;
            final Object value$iv = $receiver$iv.get(key);
            Object o;
            if (value$iv == null) {
                final Object answer$iv = new ArrayList();
                $receiver$iv.put(key, answer$iv);
                o = answer$iv;
            }
            else {
                o = value$iv;
            }
            final List list = (List)o;
            list.add(element);
        }
        return destination;
    }
    
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final M destination, @NotNull final Function1<? super T, ? extends K> keySelector, @NotNull final Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (final Object element : $receiver) {
            final Object key = keySelector.invoke((Object)element);
            final Map $receiver$iv = destination;
            final Object value$iv = $receiver$iv.get(key);
            Object o;
            if (value$iv == null) {
                final Object answer$iv = new ArrayList();
                $receiver$iv.put(key, answer$iv);
                o = answer$iv;
            }
            else {
                o = value$iv;
            }
            final List list = (List)o;
            list.add(valueTransform.invoke((Object)element));
        }
        return destination;
    }
    
    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return (Grouping<T, K>)new CollectionsKt___CollectionsKt$groupingBy.CollectionsKt___CollectionsKt$groupingBy$1((Iterable)$receiver, (Function1)keySelector);
    }
    
    @NotNull
    public static final <T, R> List<R> map(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: aload_0         /* $receiver */
        //    21: bipush          10
        //    23: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    26: invokespecial   java/util/ArrayList.<init>:(I)V
        //    29: checkcast       Ljava/util/Collection;
        //    32: astore          destination$iv
        //    34: aload_3         /* $receiver$iv */
        //    35: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    40: astore          5
        //    42: aload           5
        //    44: invokeinterface java/util/Iterator.hasNext:()Z
        //    49: ifeq            80
        //    52: aload           5
        //    54: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    59: astore          item$iv
        //    61: aload           destination$iv
        //    63: aload_1         /* transform */
        //    64: aload           item$iv
        //    66: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    71: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    76: pop            
        //    77: goto            42
        //    80: aload           destination$iv
        //    82: checkcast       Ljava/util/List;
        //    85: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TR;>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 02 FF 00 2A 00 06 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 4C 00 00 25
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R> List<R> mapIndexed(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: aload_0         /* $receiver */
        //    21: bipush          10
        //    23: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    26: invokespecial   java/util/ArrayList.<init>:(I)V
        //    29: checkcast       Ljava/util/Collection;
        //    32: astore          destination$iv
        //    34: iconst_0       
        //    35: istore          index$iv
        //    37: aload_3         /* $receiver$iv */
        //    38: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    43: astore          6
        //    45: aload           6
        //    47: invokeinterface java/util/Iterator.hasNext:()Z
        //    52: ifeq            141
        //    55: aload           6
        //    57: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    62: astore          item$iv
        //    64: aload           destination$iv
        //    66: aload_1         /* transform */
        //    67: iload           index$iv
        //    69: iinc            index$iv, 1
        //    72: istore          8
        //    74: astore          9
        //    76: astore          10
        //    78: iload           8
        //    80: ifge            112
        //    83: iconst_1       
        //    84: iconst_3       
        //    85: iconst_0       
        //    86: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    89: ifeq            98
        //    92: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    95: goto            112
        //    98: new             Ljava/lang/ArithmeticException;
        //   101: dup            
        //   102: ldc_w           "Index overflow has happened."
        //   105: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //   108: checkcast       Ljava/lang/Throwable;
        //   111: athrow         
        //   112: iload           8
        //   114: istore          11
        //   116: aload           10
        //   118: aload           9
        //   120: iload           11
        //   122: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   125: aload           item$iv
        //   127: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   132: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   137: pop            
        //   138: goto            45
        //   141: aload           destination$iv
        //   143: checkcast       Ljava/util/List;
        //   146: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;+TR;>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 04 FF 00 2D 00 07 07 01 46 07 02 21 00 07 01 46 07 01 22 01 07 01 4C 00 00 FF 00 34 00 0B 07 01 46 07 02 21 00 07 01 46 07 01 22 01 07 01 4C 07 01 44 01 07 02 21 07 01 22 00 00 0D FF 00 1C 00 07 07 01 46 07 02 21 00 07 01 46 07 01 22 01 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R> List<R> mapIndexedNotNull(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: astore          $receiver$iv$iv
        //    31: iconst_0       
        //    32: istore          index$iv$iv
        //    34: aload           $receiver$iv$iv
        //    36: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    41: astore          7
        //    43: aload           7
        //    45: invokeinterface java/util/Iterator.hasNext:()Z
        //    50: ifeq            156
        //    53: aload           7
        //    55: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    60: astore          item$iv$iv
        //    62: iload           index$iv$iv
        //    64: iinc            index$iv$iv, 1
        //    67: istore          9
        //    69: iload           9
        //    71: ifge            103
        //    74: iconst_1       
        //    75: iconst_3       
        //    76: iconst_0       
        //    77: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    80: ifeq            89
        //    83: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    86: goto            103
        //    89: new             Ljava/lang/ArithmeticException;
        //    92: dup            
        //    93: ldc_w           "Index overflow has happened."
        //    96: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    99: checkcast       Ljava/lang/Throwable;
        //   102: athrow         
        //   103: iload           9
        //   105: istore          10
        //   107: iload           10
        //   109: aload           item$iv$iv
        //   111: astore          11
        //   113: istore          index$iv
        //   115: aload_1         /* transform */
        //   116: iload           index$iv
        //   118: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   121: aload           element$iv
        //   123: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   128: dup            
        //   129: ifnull          151
        //   132: astore          13
        //   134: aload           13
        //   136: astore          it$iv
        //   138: aload           destination$iv
        //   140: aload           it$iv
        //   142: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   147: pop            
        //   148: goto            152
        //   151: pop            
        //   152: nop            
        //   153: goto            43
        //   156: nop            
        //   157: aload           destination$iv
        //   159: checkcast       Ljava/util/List;
        //   162: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;+TR;>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 06 FF 00 2B 00 08 07 01 46 07 02 21 00 07 01 46 07 01 22 07 01 46 01 07 01 4C 00 00 FD 00 2D 07 01 44 01 0D FF 00 2F 00 0D 07 01 46 07 02 21 00 07 01 46 07 01 22 07 01 46 01 07 01 4C 07 01 44 01 01 07 01 44 01 00 01 07 01 44 00 FF 00 03 00 08 07 01 46 07 02 21 00 07 01 46 07 01 22 07 01 46 01 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* destination */
        //     8: ldc_w           "destination"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_2         /* transform */
        //    15: ldc_w           "transform"
        //    18: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    21: aload_0         /* $receiver */
        //    22: astore          $receiver$iv
        //    24: iconst_0       
        //    25: istore          index$iv
        //    27: aload           $receiver$iv
        //    29: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    34: astore          6
        //    36: aload           6
        //    38: invokeinterface java/util/Iterator.hasNext:()Z
        //    43: ifeq            148
        //    46: aload           6
        //    48: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    53: astore          item$iv
        //    55: iload           index$iv
        //    57: iinc            index$iv, 1
        //    60: istore          8
        //    62: iload           8
        //    64: ifge            96
        //    67: iconst_1       
        //    68: iconst_3       
        //    69: iconst_0       
        //    70: invokestatic    kotlin/internal/PlatformImplementationsKt.apiVersionIsAtLeast:(III)Z
        //    73: ifeq            82
        //    76: invokestatic    kotlin/collections/CollectionsKt.throwIndexOverflow:()V
        //    79: goto            96
        //    82: new             Ljava/lang/ArithmeticException;
        //    85: dup            
        //    86: ldc_w           "Index overflow has happened."
        //    89: invokespecial   java/lang/ArithmeticException.<init>:(Ljava/lang/String;)V
        //    92: checkcast       Ljava/lang/Throwable;
        //    95: athrow         
        //    96: iload           8
        //    98: istore          9
        //   100: iload           9
        //   102: aload           item$iv
        //   104: astore          10
        //   106: istore          index
        //   108: aload_2         /* transform */
        //   109: iload           index
        //   111: invokestatic    java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        //   114: aload           element
        //   116: invokeinterface kotlin/jvm/functions/Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   121: dup            
        //   122: ifnull          143
        //   125: astore          12
        //   127: aload           12
        //   129: astore          it
        //   131: aload_1         /* destination */
        //   132: aload           it
        //   134: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   139: pop            
        //   140: goto            144
        //   143: pop            
        //   144: nop            
        //   145: goto            36
        //   148: nop            
        //   149: aload_1         /* destination */
        //   150: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;C::Ljava/util/Collection<-TR;>;>(Ljava/lang/Iterable<+TT;>;TC;Lkotlin/jvm/functions/Function2<-Ljava/lang/Integer;-TT;+TR;>;)TC;
        //    StackMapTable: 00 06 FF 00 24 00 07 07 01 46 07 01 22 07 02 21 00 07 01 46 01 07 01 4C 00 00 FD 00 2D 07 01 44 01 0D FF 00 2E 00 0C 07 01 46 07 01 22 07 02 21 00 07 01 46 01 07 01 4C 07 01 44 01 01 07 01 44 01 00 01 07 01 44 00 FF 00 03 00 07 07 01 46 07 01 22 07 02 21 00 07 01 46 01 07 01 4C 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (final Object item : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            destination.add((Object)transform.invoke(Integer.valueOf(i), (Object)item));
        }
        return destination;
    }
    
    @NotNull
    public static final <T, R> List<R> mapNotNull(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> transform) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* transform */
        //     8: ldc_w           "transform"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_3       
        //    16: new             Ljava/util/ArrayList;
        //    19: dup            
        //    20: invokespecial   java/util/ArrayList.<init>:()V
        //    23: checkcast       Ljava/util/Collection;
        //    26: astore          destination$iv
        //    28: aload_3         /* $receiver$iv */
        //    29: astore          $receiver$iv$iv
        //    31: aload           $receiver$iv$iv
        //    33: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    38: astore          6
        //    40: aload           6
        //    42: invokeinterface java/util/Iterator.hasNext:()Z
        //    47: ifeq            99
        //    50: aload           6
        //    52: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    57: astore          element$iv$iv
        //    59: aload           element$iv$iv
        //    61: astore          element$iv
        //    63: aload_1         /* transform */
        //    64: aload           element$iv
        //    66: invokeinterface kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        //    71: dup            
        //    72: ifnull          94
        //    75: astore          9
        //    77: aload           9
        //    79: astore          it$iv
        //    81: aload           destination$iv
        //    83: aload           it$iv
        //    85: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    90: pop            
        //    91: goto            95
        //    94: pop            
        //    95: nop            
        //    96: goto            40
        //    99: nop            
        //   100: aload           destination$iv
        //   102: checkcast       Ljava/util/List;
        //   105: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/jvm/functions/Function1<-TT;+TR;>;)Ljava/util/List<TR;>;
        //    StackMapTable: 00 04 FF 00 28 00 07 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 46 07 01 4C 00 00 FF 00 35 00 09 07 01 46 07 01 30 00 07 01 46 07 01 22 07 01 46 07 01 4C 07 01 44 07 01 44 00 01 07 01 44 00 F9 00 03
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        final Iterable $receiver$iv = $receiver;
        for (final Object element : $receiver$iv) {
            final Object element$iv = element;
            final R invoke = (R)transform.invoke((Object)element);
            if (invoke != null) {
                final Object it = invoke;
                destination.add((Object)it);
            }
        }
        return destination;
    }
    
    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final C destination, @NotNull final Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (final Object item : $receiver) {
            destination.add((Object)transform.invoke((Object)item));
        }
        return destination;
    }
    
    @NotNull
    public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (Iterable<IndexedValue<T>>)new IndexingIterable((Function0<? extends Iterator<?>>)new CollectionsKt___CollectionsKt$withIndex.CollectionsKt___CollectionsKt$withIndex$1((Iterable)$receiver));
    }
    
    @NotNull
    public static final <T> List<T> distinct(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return (List<T>)toList((Iterable<?>)toMutableSet((Iterable<?>)$receiver));
    }
    
    @NotNull
    public static final <T, K> List<T> distinctBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        final HashSet set = new HashSet();
        final ArrayList list = new ArrayList();
        for (final Object e : $receiver) {
            final Object key = selector.invoke((Object)e);
            if (set.add(key)) {
                list.add(e);
            }
        }
        return (List<T>)list;
    }
    
    @NotNull
    public static final <T> Set<T> intersect(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        final Set set = toMutableSet((Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.retainAll((Collection<? super Object>)set, (Iterable<?>)other);
        return (Set<T>)set;
    }
    
    @NotNull
    public static final <T> Set<T> subtract(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        final Set set = toMutableSet((Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.removeAll((Collection<? super Object>)set, (Iterable<?>)other);
        return (Set<T>)set;
    }
    
    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return ($receiver instanceof Collection) ? new LinkedHashSet<T>((Collection<? extends T>)$receiver) : toCollection((Iterable<?>)$receiver, (LinkedHashSet<T>)new LinkedHashSet<T>());
    }
    
    @NotNull
    public static final <T> Set<T> union(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        final Set set = toMutableSet((Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)set, (Iterable<?>)other);
        return (Set<T>)set;
    }
    
    public static final <T> boolean all(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ($receiver instanceof Collection && ((Collection<Object>)$receiver).isEmpty()) {
            return true;
        }
        for (final Object element : $receiver) {
            if (!predicate.invoke((Object)element)) {
                return false;
            }
        }
        return true;
    }
    
    public static final <T> boolean any(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return !((Collection)$receiver).isEmpty();
        }
        return $receiver.iterator().hasNext();
    }
    
    public static final <T> boolean any(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ($receiver instanceof Collection && ((Collection<Object>)$receiver).isEmpty()) {
            return false;
        }
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return true;
            }
        }
        return false;
    }
    
    public static final <T> int count(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return ((Collection<Object>)$receiver).size();
        }
        int count = 0;
        for (final Object element : $receiver) {
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return count;
    }
    
    @InlineOnly
    private static final <T> int count(@NotNull final Collection<? extends T> $receiver) {
        return $receiver.size();
    }
    
    public static final <T> int count(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ($receiver instanceof Collection && ((Collection<Object>)$receiver).isEmpty()) {
            return 0;
        }
        int count = 0;
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element) && ++count < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt.throwCountOverflow();
            }
        }
        return count;
    }
    
    public static final <T, R> R fold(@NotNull final Iterable<? extends T> $receiver, final R initial, @NotNull final Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Object accumulator = initial;
        for (final Object element : $receiver) {
            accumulator = operation.invoke((Object)accumulator, (Object)element);
        }
        return (R)accumulator;
    }
    
    public static final <T, R> R foldIndexed(@NotNull final Iterable<? extends T> $receiver, final R initial, @NotNull final Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int index = 0;
        Object accumulator = initial;
        for (final Object element : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            accumulator = operation.invoke(Integer.valueOf(i), (Object)accumulator, (Object)element);
        }
        return (R)accumulator;
    }
    
    public static final <T, R> R foldRight(@NotNull final List<? extends T> $receiver, final R initial, @NotNull final Function2<? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Object accumulator = initial;
        if (!$receiver.isEmpty()) {
            final ListIterator iterator = $receiver.listIterator($receiver.size());
            while (iterator.hasPrevious()) {
                accumulator = operation.invoke(iterator.previous(), (Object)accumulator);
            }
        }
        return (R)accumulator;
    }
    
    public static final <T, R> R foldRightIndexed(@NotNull final List<? extends T> $receiver, final R initial, @NotNull final Function3<? super Integer, ? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Object accumulator = initial;
        if (!$receiver.isEmpty()) {
            final ListIterator iterator = $receiver.listIterator($receiver.size());
            while (iterator.hasPrevious()) {
                final int index = iterator.previousIndex();
                accumulator = operation.invoke(Integer.valueOf(index), iterator.previous(), (Object)accumulator);
            }
        }
        return (R)accumulator;
    }
    
    @HidesMembers
    public static final <T> void forEach(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (final Object element : $receiver) {
            action.invoke((Object)element);
        }
    }
    
    public static final <T> void forEachIndexed(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        int index = 0;
        for (final Object item : $receiver) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            action.invoke(Integer.valueOf(i), (Object)item);
        }
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double max(@NotNull final Iterable<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = iterator.next().doubleValue();
        if (Double.isNaN(max)) {
            return max;
        }
        while (iterator.hasNext()) {
            final double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return e;
            }
            if (max >= e) {
                continue;
            }
            max = e;
        }
        return max;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float max(@NotNull final Iterable<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = iterator.next().floatValue();
        if (Float.isNaN(max)) {
            return max;
        }
        while (iterator.hasNext()) {
            final float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return e;
            }
            if (max >= e) {
                continue;
            }
            max = e;
        }
        return max;
    }
    
    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Comparable max = iterator.next();
        while (iterator.hasNext()) {
            final Comparable e = iterator.next();
            if (max.compareTo(e) < 0) {
                max = e;
            }
        }
        return (T)max;
    }
    
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object maxElem = iterator.next();
        Comparable maxValue = (Comparable)selector.invoke((Object)maxElem);
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            final Comparable v = (Comparable)selector.invoke((Object)e);
            if (maxValue.compareTo(v) < 0) {
                maxElem = e;
                maxValue = v;
            }
        }
        return (T)maxElem;
    }
    
    @Nullable
    public static final <T> T maxWith(@NotNull final Iterable<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object max = iterator.next();
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            if (comparator.compare((Object)max, (Object)e) < 0) {
                max = e;
            }
        }
        return (T)max;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double min(@NotNull final Iterable<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = iterator.next().doubleValue();
        if (Double.isNaN(min)) {
            return min;
        }
        while (iterator.hasNext()) {
            final double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return e;
            }
            if (min <= e) {
                continue;
            }
            min = e;
        }
        return min;
    }
    
    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float min(@NotNull final Iterable<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = iterator.next().floatValue();
        if (Float.isNaN(min)) {
            return min;
        }
        while (iterator.hasNext()) {
            final float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return e;
            }
            if (min <= e) {
                continue;
            }
            min = e;
        }
        return min;
    }
    
    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Comparable min = iterator.next();
        while (iterator.hasNext()) {
            final Comparable e = iterator.next();
            if (min.compareTo(e) > 0) {
                min = e;
            }
        }
        return (T)min;
    }
    
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object minElem = iterator.next();
        Comparable minValue = (Comparable)selector.invoke((Object)minElem);
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            final Comparable v = (Comparable)selector.invoke((Object)e);
            if (minValue.compareTo(v) > 0) {
                minElem = e;
                minValue = v;
            }
        }
        return (T)minElem;
    }
    
    @Nullable
    public static final <T> T minWith(@NotNull final Iterable<? extends T> $receiver, @NotNull final Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        Object min = iterator.next();
        while (iterator.hasNext()) {
            final Object e = iterator.next();
            if (comparator.compare((Object)min, (Object)e) > 0) {
                min = e;
            }
        }
        return (T)min;
    }
    
    public static final <T> boolean none(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return ((Collection)$receiver).isEmpty();
        }
        return !$receiver.iterator().hasNext();
    }
    
    public static final <T> boolean none(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ($receiver instanceof Collection && ((Collection<Object>)$receiver).isEmpty()) {
            return true;
        }
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                return false;
            }
        }
        return true;
    }
    
    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, C extends Iterable<? extends T>> C onEach(@NotNull final C $receiver, @NotNull final Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(action, "action");
        final Iterable $receiver2 = $receiver;
        for (final Object element : $receiver2) {
            action.invoke((Object)element);
        }
        return $receiver;
    }
    
    public static final <S, T extends S> S reduce(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        Object accumulator = iterator.next();
        while (iterator.hasNext()) {
            accumulator = operation.invoke((Object)accumulator, iterator.next());
        }
        return (S)accumulator;
    }
    
    public static final <S, T extends S> S reduceIndexed(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        int index = 1;
        Object accumulator = iterator.next();
        while (iterator.hasNext()) {
            final int i = index++;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt.throwIndexOverflow();
            }
            accumulator = operation.invoke(Integer.valueOf(i), (Object)accumulator, iterator.next());
        }
        return (S)accumulator;
    }
    
    public static final <S, T extends S> S reduceRight(@NotNull final List<? extends T> $receiver, @NotNull final Function2<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        if (!iterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        Object accumulator = iterator.previous();
        while (iterator.hasPrevious()) {
            accumulator = operation.invoke(iterator.previous(), (Object)accumulator);
        }
        return (S)accumulator;
    }
    
    public static final <S, T extends S> S reduceRightIndexed(@NotNull final List<? extends T> $receiver, @NotNull final Function3<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        final ListIterator iterator = $receiver.listIterator($receiver.size());
        if (!iterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        Object accumulator = iterator.previous();
        while (iterator.hasPrevious()) {
            final int index = iterator.previousIndex();
            accumulator = operation.invoke(Integer.valueOf(index), iterator.previous(), (Object)accumulator);
        }
        return (S)accumulator;
    }
    
    public static final <T> int sumBy(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        int sum = 0;
        for (final Object element : $receiver) {
            sum += selector.invoke((Object)element).intValue();
        }
        return sum;
    }
    
    public static final <T> double sumByDouble(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        double sum = 0.0;
        for (final Object element : $receiver) {
            sum += selector.invoke((Object)element).doubleValue();
        }
        return sum;
    }
    
    @NotNull
    public static final <T> Iterable<T> requireNoNulls(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        for (final Object element : $receiver) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + $receiver + '.');
            }
        }
        return (Iterable<T>)$receiver;
    }
    
    @NotNull
    public static final <T> List<T> requireNoNulls(@NotNull final List<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        for (final Object element : $receiver) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + $receiver + '.');
            }
        }
        return (List<T>)$receiver;
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> chunked(@NotNull final Iterable<? extends T> $receiver, final int size) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return windowed($receiver, size, size, true);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> chunked(@NotNull final Iterable<? extends T> $receiver, final int size, @NotNull final Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return windowed((Iterable<?>)$receiver, size, size, true, (Function1<? super List<?>, ? extends R>)transform);
    }
    
    @NotNull
    public static final <T> List<T> minus(@NotNull final Iterable<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final ArrayList result = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)$receiver, 10));
        boolean removed = false;
        final Iterable $receiver$iv = $receiver;
        for (final Object it : $receiver$iv) {
            final Object element$iv = it;
            boolean b;
            if (!removed && Intrinsics.areEqual(it, element)) {
                removed = true;
                b = false;
            }
            else {
                b = true;
            }
            if (b) {
                result.add(element$iv);
            }
        }
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> minus(@NotNull final Iterable<? extends T> $receiver, @NotNull final T[] elements) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* elements */
        //     8: ldc_w           "elements"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_1         /* elements */
        //    15: astore_2       
        //    16: aload_2        
        //    17: arraylength    
        //    18: ifne            25
        //    21: iconst_1       
        //    22: goto            26
        //    25: iconst_0       
        //    26: ifeq            34
        //    29: aload_0         /* $receiver */
        //    30: invokestatic    kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
        //    33: areturn        
        //    34: aload_1         /* elements */
        //    35: invokestatic    kotlin/collections/ArraysKt.toHashSet:([Ljava/lang/Object;)Ljava/util/HashSet;
        //    38: astore_2        /* other */
        //    39: aload_0         /* $receiver */
        //    40: astore_3        /* $receiver$iv */
        //    41: aload_3         /* $receiver$iv */
        //    42: astore          4
        //    44: new             Ljava/util/ArrayList;
        //    47: dup            
        //    48: invokespecial   java/util/ArrayList.<init>:()V
        //    51: checkcast       Ljava/util/Collection;
        //    54: astore          destination$iv$iv
        //    56: aload           $receiver$iv$iv
        //    58: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    63: astore          6
        //    65: aload           6
        //    67: invokeinterface java/util/Iterator.hasNext:()Z
        //    72: ifeq            110
        //    75: aload           6
        //    77: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    82: astore          element$iv$iv
        //    84: aload           element$iv$iv
        //    86: astore          it
        //    88: aload_2         /* other */
        //    89: aload           it
        //    91: invokevirtual   java/util/HashSet.contains:(Ljava/lang/Object;)Z
        //    94: ifne            65
        //    97: aload           destination$iv$iv
        //    99: aload           element$iv$iv
        //   101: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   106: pop            
        //   107: goto            65
        //   110: aload           destination$iv$iv
        //   112: checkcast       Ljava/util/List;
        //   115: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;[TT;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 05 FC 00 19 07 02 88 40 01 07 FF 00 1E 00 07 07 01 46 07 02 88 07 03 03 07 01 46 07 01 46 07 01 22 07 01 4C 00 00 2C
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> minus(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends T> elements) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* elements */
        //     8: ldc_w           "elements"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_1         /* elements */
        //    15: aload_0         /* $receiver */
        //    16: invokestatic    kotlin/collections/CollectionsKt.convertToSetForSetOperationWith:(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/Collection;
        //    19: astore_2        /* other */
        //    20: aload_2         /* other */
        //    21: invokeinterface java/util/Collection.isEmpty:()Z
        //    26: ifeq            34
        //    29: aload_0         /* $receiver */
        //    30: invokestatic    kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
        //    33: areturn        
        //    34: aload_0         /* $receiver */
        //    35: astore_3        /* $receiver$iv */
        //    36: aload_3         /* $receiver$iv */
        //    37: astore          4
        //    39: new             Ljava/util/ArrayList;
        //    42: dup            
        //    43: invokespecial   java/util/ArrayList.<init>:()V
        //    46: checkcast       Ljava/util/Collection;
        //    49: astore          destination$iv$iv
        //    51: aload           $receiver$iv$iv
        //    53: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    58: astore          6
        //    60: aload           6
        //    62: invokeinterface java/util/Iterator.hasNext:()Z
        //    67: ifeq            107
        //    70: aload           6
        //    72: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    77: astore          element$iv$iv
        //    79: aload           element$iv$iv
        //    81: astore          it
        //    83: aload_2         /* other */
        //    84: aload           it
        //    86: invokeinterface java/util/Collection.contains:(Ljava/lang/Object;)Z
        //    91: ifne            60
        //    94: aload           destination$iv$iv
        //    96: aload           element$iv$iv
        //    98: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //   103: pop            
        //   104: goto            60
        //   107: aload           destination$iv$iv
        //   109: checkcast       Ljava/util/List;
        //   112: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Ljava/lang/Iterable<+TT;>;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 03 FC 00 22 07 01 22 FF 00 19 00 07 07 01 46 07 01 46 07 01 22 07 01 46 07 01 46 07 01 22 07 01 4C 00 00 2E
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T> List<T> minus(@NotNull final Iterable<? extends T> $receiver, @NotNull final Sequence<? extends T> elements) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* elements */
        //     8: ldc_w           "elements"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_1         /* elements */
        //    15: invokestatic    kotlin/sequences/SequencesKt.toHashSet:(Lkotlin/sequences/Sequence;)Ljava/util/HashSet;
        //    18: astore_2        /* other */
        //    19: aload_2         /* other */
        //    20: invokevirtual   java/util/HashSet.isEmpty:()Z
        //    23: ifeq            31
        //    26: aload_0         /* $receiver */
        //    27: invokestatic    kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
        //    30: areturn        
        //    31: aload_0         /* $receiver */
        //    32: astore_3        /* $receiver$iv */
        //    33: aload_3         /* $receiver$iv */
        //    34: astore          4
        //    36: new             Ljava/util/ArrayList;
        //    39: dup            
        //    40: invokespecial   java/util/ArrayList.<init>:()V
        //    43: checkcast       Ljava/util/Collection;
        //    46: astore          destination$iv$iv
        //    48: aload           $receiver$iv$iv
        //    50: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    55: astore          6
        //    57: aload           6
        //    59: invokeinterface java/util/Iterator.hasNext:()Z
        //    64: ifeq            102
        //    67: aload           6
        //    69: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    74: astore          element$iv$iv
        //    76: aload           element$iv$iv
        //    78: astore          it
        //    80: aload_2         /* other */
        //    81: aload           it
        //    83: invokevirtual   java/util/HashSet.contains:(Ljava/lang/Object;)Z
        //    86: ifne            57
        //    89: aload           destination$iv$iv
        //    91: aload           element$iv$iv
        //    93: invokeinterface java/util/Collection.add:(Ljava/lang/Object;)Z
        //    98: pop            
        //    99: goto            57
        //   102: aload           destination$iv$iv
        //   104: checkcast       Ljava/util/List;
        //   107: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Lkotlin/sequences/Sequence<+TT;>;)Ljava/util/List<TT;>;
        //    StackMapTable: 00 03 FC 00 1F 07 03 03 FF 00 19 00 07 07 01 46 07 03 DF 07 03 03 07 01 46 07 01 46 07 01 22 07 01 4C 00 00 2C
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @InlineOnly
    private static final <T> List<T> minusElement(@NotNull final Iterable<? extends T> $receiver, final T element) {
        return (List<T>)minus($receiver, (Object)element);
    }
    
    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        final ArrayList first = new ArrayList();
        final ArrayList second = new ArrayList();
        for (final Object element : $receiver) {
            if (predicate.invoke((Object)element)) {
                first.add(element);
            }
            else {
                second.add(element);
            }
        }
        return new Pair<List<T>, List<T>>(first, second);
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Iterable<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        if ($receiver instanceof Collection) {
            return plus((Collection<? extends T>)$receiver, element);
        }
        final ArrayList result = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)$receiver);
        result.add(element);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Collection<? extends T> $receiver, final T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        final ArrayList result = new ArrayList($receiver.size() + 1);
        result.addAll($receiver);
        result.add(element);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Iterable<? extends T> $receiver, @NotNull final T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if ($receiver instanceof Collection) {
            return plus((Collection<? extends T>)$receiver, elements);
        }
        final ArrayList result = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.addAll(result, elements);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Collection<? extends T> $receiver, @NotNull final T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        final ArrayList result = new ArrayList($receiver.size() + elements.length);
        result.addAll($receiver);
        CollectionsKt__MutableCollectionsKt.addAll(result, elements);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if ($receiver instanceof Collection) {
            return plus((Collection<? extends T>)$receiver, elements);
        }
        final ArrayList result = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)elements);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Collection<? extends T> $receiver, @NotNull final Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements instanceof Collection) {
            final ArrayList result = new ArrayList($receiver.size() + ((Collection<? extends T>)elements).size());
            result.addAll($receiver);
            result.addAll((Collection)elements);
            return (List<T>)result;
        }
        final ArrayList result = new ArrayList((Collection<? extends E>)$receiver);
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)elements);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Iterable<? extends T> $receiver, @NotNull final Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        final ArrayList result = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Iterable<?>)$receiver);
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Sequence<?>)elements);
        return (List<T>)result;
    }
    
    @NotNull
    public static final <T> List<T> plus(@NotNull final Collection<? extends T> $receiver, @NotNull final Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        final ArrayList result = new ArrayList($receiver.size() + 10);
        result.addAll($receiver);
        CollectionsKt__MutableCollectionsKt.addAll((Collection<? super Object>)result, (Sequence<?>)elements);
        return (List<T>)result;
    }
    
    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull final Iterable<? extends T> $receiver, final T element) {
        return (List<T>)plus($receiver, (Object)element);
    }
    
    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull final Collection<? extends T> $receiver, final T element) {
        return (List<T>)plus($receiver, (Object)element);
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> windowed(@NotNull final Iterable<? extends T> $receiver, final int size, final int step, final boolean partialWindows) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: iload_1         /* size */
        //     8: iload_2         /* step */
        //     9: invokestatic    kotlin/collections/SlidingWindowKt.checkWindowSizeStep:(II)V
        //    12: aload_0         /* $receiver */
        //    13: instanceof      Ljava/util/RandomAccess;
        //    16: ifeq            189
        //    19: aload_0         /* $receiver */
        //    20: instanceof      Ljava/util/List;
        //    23: ifeq            189
        //    26: aload_0         /* $receiver */
        //    27: checkcast       Ljava/util/List;
        //    30: invokeinterface java/util/List.size:()I
        //    35: istore          thisSize
        //    37: new             Ljava/util/ArrayList;
        //    40: dup            
        //    41: iload           thisSize
        //    43: iload_2         /* step */
        //    44: iadd           
        //    45: iconst_1       
        //    46: isub           
        //    47: iload_2         /* step */
        //    48: idiv           
        //    49: invokespecial   java/util/ArrayList.<init>:(I)V
        //    52: astore          result
        //    54: iconst_0       
        //    55: istore          index
        //    57: iload           index
        //    59: iload           thisSize
        //    61: if_icmpge       183
        //    64: iload_1         /* size */
        //    65: iload           thisSize
        //    67: iload           index
        //    69: isub           
        //    70: invokestatic    kotlin/ranges/RangesKt.coerceAtMost:(II)I
        //    73: istore          windowSize
        //    75: iload           windowSize
        //    77: iload_1         /* size */
        //    78: if_icmpge       88
        //    81: iload_3         /* partialWindows */
        //    82: ifne            88
        //    85: goto            183
        //    88: aload           result
        //    90: astore          14
        //    92: new             Ljava/util/ArrayList;
        //    95: dup            
        //    96: iload           windowSize
        //    98: invokespecial   java/util/ArrayList.<init>:(I)V
        //   101: astore          8
        //   103: iconst_0       
        //   104: istore          9
        //   106: iload           windowSize
        //   108: istore          10
        //   110: iload           9
        //   112: iload           10
        //   114: if_icmpge       159
        //   117: iload           9
        //   119: istore          11
        //   121: aload           8
        //   123: iload           11
        //   125: istore          12
        //   127: astore          15
        //   129: aload_0         /* $receiver */
        //   130: checkcast       Ljava/util/List;
        //   133: iload           it
        //   135: iload           index
        //   137: iadd           
        //   138: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   143: astore          16
        //   145: aload           15
        //   147: aload           16
        //   149: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   152: pop            
        //   153: iinc            9, 1
        //   156: goto            110
        //   159: aload           8
        //   161: checkcast       Ljava/util/List;
        //   164: astore          15
        //   166: aload           14
        //   168: aload           15
        //   170: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   173: pop            
        //   174: iload           index
        //   176: iload_2         /* step */
        //   177: iadd           
        //   178: istore          index
        //   180: goto            57
        //   183: aload           result
        //   185: checkcast       Ljava/util/List;
        //   188: areturn        
        //   189: new             Ljava/util/ArrayList;
        //   192: dup            
        //   193: invokespecial   java/util/ArrayList.<init>:()V
        //   196: astore          result
        //   198: aload_0         /* $receiver */
        //   199: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //   204: iload_1         /* size */
        //   205: iload_2         /* step */
        //   206: iload_3         /* partialWindows */
        //   207: iconst_0       
        //   208: invokestatic    kotlin/collections/SlidingWindowKt.windowedIterator:(Ljava/util/Iterator;IIZZ)Ljava/util/Iterator;
        //   211: astore          $receiver$iv
        //   213: aload           $receiver$iv
        //   215: astore          6
        //   217: aload           6
        //   219: astore          7
        //   221: aload           7
        //   223: invokeinterface java/util/Iterator.hasNext:()Z
        //   228: ifeq            259
        //   231: aload           7
        //   233: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   238: astore          element$iv
        //   240: aload           element$iv
        //   242: checkcast       Ljava/util/List;
        //   245: astore          it
        //   247: aload           result
        //   249: aload           it
        //   251: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   254: pop            
        //   255: nop            
        //   256: goto            221
        //   259: nop            
        //   260: aload           result
        //   262: checkcast       Ljava/util/List;
        //   265: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;IIZ)Ljava/util/List<Ljava/util/List<TT;>;>;
        //    StackMapTable: 00 08 FE 00 39 01 07 01 FD 01 FC 00 1E 01 FF 00 15 00 0F 07 01 46 01 01 01 01 07 01 FD 01 01 07 01 FD 01 01 00 00 00 07 01 FD 00 00 30 FF 00 17 00 07 07 01 46 01 01 01 01 07 01 FD 01 00 00 F8 00 05 FF 00 1F 00 08 07 01 46 01 01 01 07 01 FD 07 01 4C 07 01 4C 07 01 4C 00 00 25
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> windowed(@NotNull final Iterable<? extends T> $receiver, final int size, final int step, final boolean partialWindows, @NotNull final Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        SlidingWindowKt.checkWindowSizeStep(size, step);
        if ($receiver instanceof RandomAccess && $receiver instanceof List) {
            final int thisSize = ((List)$receiver).size();
            final ArrayList result = new ArrayList((thisSize + step - 1) / step);
            final MovingSubList window = new MovingSubList((List<? extends E>)$receiver);
            for (int index = 0; index < thisSize; index += step) {
                window.move(index, RangesKt___RangesKt.coerceAtMost(index + size, thisSize));
                if (!partialWindows && window.size() < size) {
                    break;
                }
                result.add(transform.invoke((Object)window));
            }
            return (List<R>)result;
        }
        final ArrayList result2 = new ArrayList();
        final Iterator<List<Object>> windowedIterator;
        final Iterator $receiver$iv = windowedIterator = SlidingWindowKt.windowedIterator((Iterator<?>)$receiver.iterator(), size, step, partialWindows, true);
        while (windowedIterator.hasNext()) {
            final Object element$iv = windowedIterator.next();
            final List it = (List)element$iv;
            result2.add(transform.invoke((Object)it));
        }
        return (List<R>)result2;
    }
    
    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull final Iterable<? extends T> $receiver, @NotNull final R[] other) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* other */
        //     8: ldc_w           "other"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_2        /* $receiver$iv */
        //    16: aload_1         /* other */
        //    17: arraylength    
        //    18: istore_3        /* arraySize$iv */
        //    19: aload_2         /* $receiver$iv */
        //    20: bipush          10
        //    22: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    25: istore          4
        //    27: iload           4
        //    29: iload_3         /* arraySize$iv */
        //    30: invokestatic    java/lang/Math.min:(II)I
        //    33: istore          7
        //    35: iload           7
        //    37: istore          17
        //    39: new             Ljava/util/ArrayList;
        //    42: dup            
        //    43: iload           17
        //    45: invokespecial   java/util/ArrayList.<init>:(I)V
        //    48: astore          list$iv
        //    50: iconst_0       
        //    51: istore          i$iv
        //    53: aload_2         /* $receiver$iv */
        //    54: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    59: astore          9
        //    61: aload           9
        //    63: invokeinterface java/util/Iterator.hasNext:()Z
        //    68: ifeq            126
        //    71: aload           9
        //    73: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    78: astore          element$iv
        //    80: iload           i$iv
        //    82: iload_3         /* arraySize$iv */
        //    83: if_icmplt       89
        //    86: goto            126
        //    89: aload           list$iv
        //    91: aload           element$iv
        //    93: aload_1         /* other */
        //    94: iload           i$iv
        //    96: iinc            i$iv, 1
        //    99: aaload         
        //   100: astore          11
        //   102: astore          12
        //   104: astore          15
        //   106: aload           t1
        //   108: aload           t2
        //   110: invokestatic    kotlin/TuplesKt.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;
        //   113: astore          16
        //   115: aload           15
        //   117: aload           16
        //   119: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   122: pop            
        //   123: goto            61
        //   126: aload           list$iv
        //   128: checkcast       Ljava/util/List;
        //   131: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;[TR;)Ljava/util/List<Lkotlin/Pair<TT;TR;>;>;
        //    StackMapTable: 00 03 FF 00 3D 00 12 07 01 46 07 02 88 07 01 46 01 01 00 00 01 07 01 FD 07 01 4C 00 00 00 00 00 00 00 01 00 00 FF 00 1B 00 12 07 01 46 07 02 88 07 01 46 01 01 00 00 01 07 01 FD 07 01 4C 07 01 44 00 00 00 00 00 00 01 00 00 FF 00 24 00 12 07 01 46 07 02 88 07 01 46 01 01 00 00 01 07 01 FD 07 01 4C 00 00 00 00 00 00 00 01 00 00
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull final Iterable<? extends T> $receiver, @NotNull final R[] other, @NotNull final Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        final int arraySize = other.length;
        final ArrayList list = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)$receiver, 10), arraySize));
        int i = 0;
        for (final Object element : $receiver) {
            if (i >= arraySize) {
                break;
            }
            list.add(transform.invoke((Object)element, other[i++]));
        }
        return (List<V>)list;
    }
    
    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends R> other) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_1         /* other */
        //     8: ldc_w           "other"
        //    11: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //    14: aload_0         /* $receiver */
        //    15: astore_2        /* $receiver$iv */
        //    16: aload_2         /* $receiver$iv */
        //    17: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    22: astore_3        /* first$iv */
        //    23: aload_1         /* other */
        //    24: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    29: astore          second$iv
        //    31: aload_2         /* $receiver$iv */
        //    32: bipush          10
        //    34: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    37: istore          5
        //    39: aload_1         /* other */
        //    40: bipush          10
        //    42: invokestatic    kotlin/collections/CollectionsKt.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I
        //    45: istore          6
        //    47: iload           5
        //    49: iload           6
        //    51: invokestatic    java/lang/Math.min:(II)I
        //    54: istore          9
        //    56: iload           9
        //    58: istore          17
        //    60: new             Ljava/util/ArrayList;
        //    63: dup            
        //    64: iload           17
        //    66: invokespecial   java/util/ArrayList.<init>:(I)V
        //    69: astore          list$iv
        //    71: aload_3         /* first$iv */
        //    72: invokeinterface java/util/Iterator.hasNext:()Z
        //    77: ifeq            131
        //    80: aload           second$iv
        //    82: invokeinterface java/util/Iterator.hasNext:()Z
        //    87: ifeq            131
        //    90: aload           list$iv
        //    92: aload_3         /* first$iv */
        //    93: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    98: aload           second$iv
        //   100: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //   105: astore          11
        //   107: astore          12
        //   109: astore          15
        //   111: aload           t1
        //   113: aload           t2
        //   115: invokestatic    kotlin/TuplesKt.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;
        //   118: astore          16
        //   120: aload           15
        //   122: aload           16
        //   124: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   127: pop            
        //   128: goto            71
        //   131: aload           list$iv
        //   133: checkcast       Ljava/util/List;
        //   136: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;R:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;Ljava/lang/Iterable<+TR;>;)Ljava/util/List<Lkotlin/Pair<TT;TR;>;>;
        //    StackMapTable: 00 02 FF 00 47 00 12 07 01 46 07 01 46 07 01 46 07 01 4C 07 01 4C 01 01 00 00 01 07 01 FD 00 00 00 00 00 00 01 00 00 3B
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull final Iterable<? extends T> $receiver, @NotNull final Iterable<? extends R> other, @NotNull final Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        final Iterator first = $receiver.iterator();
        final Iterator second = other.iterator();
        final ArrayList list = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)$receiver, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault((Iterable<?>)other, 10)));
        while (first.hasNext() && second.hasNext()) {
            list.add(transform.invoke(first.next(), second.next()));
        }
        return (List<V>)list;
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<Pair<T, T>> zipWithNext(@NotNull final Iterable<? extends T> $receiver) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: ldc_w           "receiver$0"
        //     4: invokestatic    kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
        //     7: aload_0         /* $receiver */
        //     8: astore_1        /* $receiver$iv */
        //     9: aload_1         /* $receiver$iv */
        //    10: invokeinterface java/lang/Iterable.iterator:()Ljava/util/Iterator;
        //    15: astore_2        /* iterator$iv */
        //    16: aload_2         /* iterator$iv */
        //    17: invokeinterface java/util/Iterator.hasNext:()Z
        //    22: ifne            31
        //    25: invokestatic    kotlin/collections/CollectionsKt.emptyList:()Ljava/util/List;
        //    28: goto            105
        //    31: new             Ljava/util/ArrayList;
        //    34: dup            
        //    35: invokespecial   java/util/ArrayList.<init>:()V
        //    38: checkcast       Ljava/util/List;
        //    41: astore_3        /* result$iv */
        //    42: aload_2         /* iterator$iv */
        //    43: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    48: astore          current$iv
        //    50: aload_2         /* iterator$iv */
        //    51: invokeinterface java/util/Iterator.hasNext:()Z
        //    56: ifeq            104
        //    59: aload_2         /* iterator$iv */
        //    60: invokeinterface java/util/Iterator.next:()Ljava/lang/Object;
        //    65: astore          next$iv
        //    67: aload_3         /* result$iv */
        //    68: aload           current$iv
        //    70: aload           next$iv
        //    72: astore          6
        //    74: astore          7
        //    76: astore          10
        //    78: aload           a
        //    80: aload           b
        //    82: invokestatic    kotlin/TuplesKt.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;
        //    85: astore          11
        //    87: aload           10
        //    89: aload           11
        //    91: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //    96: pop            
        //    97: aload           next$iv
        //    99: astore          current$iv
        //   101: goto            50
        //   104: aload_3         /* result$iv */
        //   105: areturn        
        //    Signature:
        //  <T:Ljava/lang/Object;>(Ljava/lang/Iterable<+TT;>;)Ljava/util/List<Lkotlin/Pair<TT;TT;>;>;
        //    StackMapTable: 00 04 FD 00 1F 07 01 46 07 01 4C FD 00 12 07 01 14 07 01 44 35 FF 00 00 00 03 07 01 46 07 01 46 07 01 4C 00 01 07 01 14
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:2895)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> zipWithNext(@NotNull final Iterable<? extends T> $receiver, @NotNull final Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        final Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        final List result = new ArrayList();
        Object current = iterator.next();
        while (iterator.hasNext()) {
            final Object next = iterator.next();
            result.add(transform.invoke((Object)current, (Object)next));
            current = next;
        }
        return (List<R>)result;
    }
    
    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull final Iterable<? extends T> $receiver, @NotNull final A buffer, @NotNull final CharSequence separator, @NotNull final CharSequence prefix, @NotNull final CharSequence postfix, final int limit, @NotNull final CharSequence truncated, @Nullable final Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (final Object element : $receiver) {
            if (++count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt__StringBuilderKt.appendElement(buffer, element, (Function1<? super Object, ? extends CharSequence>)transform);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }
    
    @NotNull
    public static final <T> String joinToString(@NotNull final Iterable<? extends T> $receiver, @NotNull final CharSequence separator, @NotNull final CharSequence prefix, @NotNull final CharSequence postfix, final int limit, @NotNull final CharSequence truncated, @Nullable final Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        final String string = joinTo((Iterable<?>)$receiver, (StringBuilder)new StringBuilder(), separator, prefix, postfix, limit, truncated, (Function1<? super Object, ? extends CharSequence>)transform).toString();
        Intrinsics.checkExpressionValueIsNotNull(string, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return string;
    }
    
    @InlineOnly
    private static final <T> Iterable<T> asIterable(@NotNull final Iterable<? extends T> $receiver) {
        return (Iterable<T>)$receiver;
    }
    
    @NotNull
    public static final <T> Sequence<T> asSequence(@NotNull final Iterable<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        return new Sequence<T>($receiver) {
            @NotNull
            @Override
            public Iterator<T> iterator() {
                return this.$this_asSequence$inlined.iterator();
            }
        };
    }
    
    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull final Iterable<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Byte> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final byte element = iterator.next().byteValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull final Iterable<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Short> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final short element = iterator.next().shortValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull final Iterable<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Integer> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final int element = iterator.next().intValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull final Iterable<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Long> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final long element = iterator.next().longValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull final Iterable<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Float> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final float element = iterator.next().floatValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull final Iterable<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        int count = 0;
        final Iterator<Double> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final double element = iterator.next().doubleValue();
            sum += element;
            if (++count < 0) {
                CollectionsKt.throwCountOverflow();
            }
        }
        return (count == 0) ? DoubleCompanionObject.INSTANCE.getNaN() : (sum / count);
    }
    
    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull final Iterable<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Byte> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final byte element = iterator.next().byteValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull final Iterable<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Short> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final short element = iterator.next().shortValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull final Iterable<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        int sum = 0;
        final Iterator<Integer> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final int element = iterator.next().intValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull final Iterable<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        long sum = 0L;
        final Iterator<Long> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final long element = iterator.next().longValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull final Iterable<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        float sum = 0.0f;
        final Iterator<Float> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final float element = iterator.next().floatValue();
            sum += element;
        }
        return sum;
    }
    
    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull final Iterable<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");
        double sum = 0.0;
        final Iterator<Double> iterator = $receiver.iterator();
        while (iterator.hasNext()) {
            final double element = iterator.next().doubleValue();
            sum += element;
        }
        return sum;
    }
    
    public CollectionsKt___CollectionsKt() {
    }
}
