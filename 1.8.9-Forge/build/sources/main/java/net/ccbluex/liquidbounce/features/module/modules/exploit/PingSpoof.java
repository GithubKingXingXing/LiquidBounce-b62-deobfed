
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.Iterator;
import java.util.Map;
import net.ccbluex.liquidbounce.event.events.UpdateEvent;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.ccbluex.liquidbounce.event.events.PacketEvent;
import net.minecraft.client.audio.ISound;
import net.minecraft.client.audio.PositionedSoundRecord;
import net.minecraft.util.ResourceLocation;
import net.ccbluex.liquidbounce.features.command.Command;
import net.ccbluex.liquidbounce.LiquidBounce;
import net.minecraft.network.Packet;
import java.util.HashMap;
import net.ccbluex.liquidbounce.valuesystem.types.IntegerValue;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.Module;

@ModuleInfo(name = "PingSpoof", description = "Spoofs your ping to a given value.", category = ModuleCategory.EXPLOIT)
public class PingSpoof extends Module
{
    private final IntegerValue maxDelayValue;
    private final IntegerValue minDelayValue;
    private final HashMap<Packet<?>, Long> packetsMap;
    
    public PingSpoof() {
        this.maxDelayValue = new IntegerValue("MaxDelay", 1000, 0, 5000) {
            @Override
            protected void onChanged(final Object oldValue, final Object newValue) {
                final int minDelayValue = PingSpoof.this.minDelayValue.asInteger();
                if (minDelayValue > Integer.parseInt(String.valueOf(newValue))) {
                    this.setValue(minDelayValue);
                }
            }
        };
        this.minDelayValue = new IntegerValue("MinDelay", 500, 0, 5000) {
            @Override
            protected void onChanged(final Object oldValue, final Object newValue) {
                final int maxDelayValue = PingSpoof.this.maxDelayValue.asInteger();
                if (maxDelayValue < Integer.parseInt(String.valueOf(newValue))) {
                    this.setValue(maxDelayValue);
                }
            }
        };
        this.packetsMap = new HashMap<Packet<?>, Long>();
        LiquidBounce.CLIENT.commandManager.registerCommand(new Command("pingspoof", null) {
            @Override
            public void execute(final String[] args) {
                if (args.length > 1) {
                    if (args[1].equalsIgnoreCase("maxdelay")) {
                        if (args.length > 2) {
                            try {
                                final int value = Integer.parseInt(args[2]);
                                if (PingSpoof.this.minDelayValue.asInteger() > value) {
                                    this.chat("MinDelay can't higher as MaxDelay!");
                                    return;
                                }
                                PingSpoof.this.maxDelayValue.setValue(value);
                                this.chat("§7PingSpoof maxdelay was set to §8" + value + "§7.");
                                PingSpoof$3.mc.getSoundHandler().playSound((ISound)PositionedSoundRecord.create(new ResourceLocation("random.anvil_use"), 1.0f));
                            }
                            catch (NumberFormatException exception) {
                                this.chatSyntaxError();
                            }
                            return;
                        }
                        this.chatSyntax(".pingspoof maxdelay <value>");
                        return;
                    }
                    else if (args[1].equalsIgnoreCase("mindelay")) {
                        if (args.length > 2) {
                            try {
                                final int value = Integer.parseInt(args[2]);
                                if (PingSpoof.this.maxDelayValue.asInteger() < value) {
                                    this.chat("MinDelay can't higher as MaxDelay!");
                                    return;
                                }
                                PingSpoof.this.minDelayValue.setValue(value);
                                this.chat("§7PingSpoof mindelay was set to §8" + value + "§7.");
                                PingSpoof$3.mc.getSoundHandler().playSound((ISound)PositionedSoundRecord.create(new ResourceLocation("random.anvil_use"), 1.0f));
                            }
                            catch (NumberFormatException exception) {
                                this.chatSyntaxError();
                            }
                            return;
                        }
                        this.chatSyntax(".pingspoof mindelay <value>");
                        return;
                    }
                }
                this.chatSyntax(".pingspoof <maxdelay, mindelay>");
            }
        });
    }
    
    @Override
    public void onDisable() {
        this.packetsMap.clear();
    }
    
    @EventTarget
    public void onPacket(final PacketEvent event) {
        final Packet packet = event.getPacket();
        if ((packet instanceof C00PacketKeepAlive || packet instanceof C16PacketClientStatus) && !this.packetsMap.keySet().contains(packet)) {
            event.setCancelled(true);
            synchronized (this.packetsMap) {
                this.packetsMap.put((Packet<?>)packet, System.currentTimeMillis() + TimeUtils.randomDelay(this.minDelayValue.asInteger(), this.maxDelayValue.asInteger()));
            }
        }
    }
    
    @EventTarget(ignoreCondition = true)
    public void onUpdate(final UpdateEvent event) {
        try {
            synchronized (this.packetsMap) {
                final Iterator<Map.Entry<Packet<?>, Long>> iterator = this.packetsMap.entrySet().iterator();
                while (iterator.hasNext()) {
                    final Map.Entry<Packet<?>, Long> entry = iterator.next();
                    if (entry.getValue() < System.currentTimeMillis()) {
                        PingSpoof.mc.getNetHandler().addToSendQueue((Packet)entry.getKey());
                        iterator.remove();
                    }
                }
            }
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }
}
