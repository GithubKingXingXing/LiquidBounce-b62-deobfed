//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9 (1)"!

// 
// Decompiled by Procyon v0.5.36
// 

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.List;
import joptsimple.internal.Strings;
import java.util.Collections;
import java.util.ArrayList;
import net.minecraft.network.play.server.S3APacketTabComplete;
import net.ccbluex.liquidbounce.event.events.PacketEvent;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.utils.ChatUtils;
import net.ccbluex.liquidbounce.event.events.UpdateEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.Module;

@ModuleInfo(name = "Plugins", description = "Allows you to see which plugins the server is using.", category = ModuleCategory.EXPLOIT)
public class Plugins extends Module
{
    private final TickTimer tickTimer;
    
    public Plugins() {
        this.tickTimer = new TickTimer();
    }
    
    @Override
    public void onEnable() {
        if (Plugins.mc.thePlayer == null) {
            return;
        }
        Plugins.mc.getNetHandler().addToSendQueue((Packet)new C14PacketTabComplete("/"));
        this.tickTimer.reset();
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        this.tickTimer.update();
        if (this.tickTimer.hasTimePassed(20)) {
            ChatUtils.displayChatMessage("§cPlugins check timed out...");
            this.tickTimer.reset();
            this.setState(false);
        }
    }
    
    @EventTarget
    public void onPacket(final PacketEvent event) {
        if (event.getPacket() instanceof S3APacketTabComplete) {
            final S3APacketTabComplete s3APacketTabComplete = (S3APacketTabComplete)event.getPacket();
            final List<String> plugins = new ArrayList<String>();
            final String[] func_149630_c;
            final String[] commands = func_149630_c = s3APacketTabComplete.func_149630_c();
            for (final String command1 : func_149630_c) {
                final String[] command2 = command1.split(":");
                if (command2.length > 1) {
                    final String pluginName = command2[0].replace("/", "");
                    if (!plugins.contains(pluginName)) {
                        plugins.add(pluginName);
                    }
                }
            }
            Collections.sort(plugins);
            if (!plugins.isEmpty()) {
                ChatUtils.displayChatMessage("§aPlugins §7(§8" + plugins.size() + "§7): §c" + Strings.join((String[])plugins.toArray(new String[0]), "§7, §c"));
            }
            else {
                ChatUtils.displayChatMessage("§cNo plugins found.");
            }
            this.setState(false);
            this.tickTimer.reset();
        }
    }
}
