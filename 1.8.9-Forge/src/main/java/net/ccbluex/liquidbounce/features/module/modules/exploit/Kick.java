//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9 (1)"!

// 
// Decompiled by Procyon v0.5.36
// 

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.ccbluex.liquidbounce.utils.ChatUtils;
import net.ccbluex.liquidbounce.valuesystem.types.ListValue;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.Module;

@ModuleInfo(name = "Kick", description = "Allows you to kick yourself from a server.", category = ModuleCategory.EXPLOIT, canEnable = false)
public class Kick extends Module
{
    private final ListValue modeValue;
    
    public Kick() {
        this.modeValue = new ListValue("Mode", new String[] { "Quit", "InvaildPacket", "SelfHurt", "IllegalChat", "PacketSpam" }, "Quit");
    }
    
    @Override
    public void onEnable() {
        if (Kick.mc.isIntegratedServerRunning()) {
            ChatUtils.displayChatMessage("§c§lError: §aYou can't enable §c§l'Kick' §ain SinglePlayer.");
            return;
        }
        final String lowerCase = this.modeValue.asString().toLowerCase();
        switch (lowerCase) {
            case "quit": {
                Kick.mc.theWorld.sendQuittingDisconnectingPacket();
                break;
            }
            case "invaildpacket": {
                Kick.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, !Kick.mc.thePlayer.onGround));
                break;
            }
            case "selfhurt": {
                Kick.mc.getNetHandler().addToSendQueue((Packet)new C02PacketUseEntity((Entity)Kick.mc.thePlayer, C02PacketUseEntity.Action.ATTACK));
                break;
            }
            case "illegalchat": {
                Kick.mc.thePlayer.sendChatMessage(RandomUtils.getRandom().nextInt() + "§§§" + RandomUtils.getRandom().nextInt());
                break;
            }
            case "packetspam": {
                for (int i = 0; i < 19998; ++i) {
                    Kick.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition((double)i, (double)i, (double)i, RandomUtils.getRandom().nextBoolean()));
                }
                break;
            }
        }
    }
}
