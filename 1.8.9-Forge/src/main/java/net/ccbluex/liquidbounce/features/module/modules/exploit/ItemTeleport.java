
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.minecraft.util.MathHelper;
import java.util.ArrayList;
import java.util.List;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.util.AxisAlignedBB;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import java.awt.Color;
import org.lwjgl.opengl.GL11;
import net.ccbluex.liquidbounce.event.events.Render3DEvent;
import net.ccbluex.liquidbounce.event.EventTarget;
import java.util.Iterator;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import javax.vecmath.Vector3f;
import net.ccbluex.liquidbounce.utils.ChatUtils;
import net.minecraft.block.material.Material;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import org.lwjgl.input.Mouse;
import net.ccbluex.liquidbounce.utils.misc.MouseUtils;
import net.ccbluex.liquidbounce.event.events.UpdateEvent;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.BlockPos;
import net.ccbluex.liquidbounce.valuesystem.types.BoolValue;
import net.ccbluex.liquidbounce.valuesystem.types.ListValue;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.features.module.Module;

@ModuleInfo(name = "ItemTeleport", description = "Allows you to pick up items far away.", category = ModuleCategory.EXPLOIT)
public class ItemTeleport extends Module
{
    private final ListValue modeValue;
    private final BoolValue resetAfterTp;
    private final ListValue buttonValue;
    private int delay;
    private BlockPos endPos;
    private MovingObjectPosition objectPosition;
    
    public ItemTeleport() {
        this.modeValue = new ListValue("Mode", new String[] { "New", "Old" }, "New");
        this.resetAfterTp = new BoolValue("ResetAfterTP", true);
        this.buttonValue = new ListValue("Button", new String[] { "Left", "Middle", "Right" }, "Middle");
    }
    
    @Override
    public void onDisable() {
        this.delay = 0;
        this.endPos = null;
        super.onDisable();
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
        if (ItemTeleport.mc.currentScreen == null && Mouse.isButtonDown(MouseUtils.translateButton(this.buttonValue.asString())) && this.delay <= 0) {
            this.endPos = this.objectPosition.getBlockPos();
            if (BlockUtils.getBlock(this.endPos).getMaterial() == Material.air) {
                this.endPos = null;
                return;
            }
            ChatUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Position was set to §8" + this.endPos.getX() + "§3, §8" + this.endPos.getY() + "§3, §8" + this.endPos.getZ());
            this.delay = 6;
        }
        if (this.delay > 0) {
            --this.delay;
        }
        if (this.endPos != null && ItemTeleport.mc.thePlayer.isSneaking()) {
            if (!ItemTeleport.mc.thePlayer.onGround) {
                final double endX = this.endPos.getX() + 0.5;
                final double endY = this.endPos.getY() + 1.0;
                final double endZ = this.endPos.getZ() + 0.5;
                final String lowerCase = this.modeValue.asString().toLowerCase();
                switch (lowerCase) {
                    case "old": {
                        for (final Vector3f vector3f : this.vanillaTeleportPositions(endX, endY, endZ, 4.0)) {
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition((double)vector3f.getX(), (double)vector3f.getY(), (double)vector3f.getZ(), false));
                        }
                        break;
                    }
                    case "new": {
                        for (final Vector3f vector3f : this.vanillaTeleportPositions(endX, endY, endZ, 5.0)) {
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(ItemTeleport.mc.thePlayer.posX, ItemTeleport.mc.thePlayer.posY, ItemTeleport.mc.thePlayer.posZ, true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition((double)vector3f.x, (double)vector3f.y, (double)vector3f.z, true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(ItemTeleport.mc.thePlayer.posX, ItemTeleport.mc.thePlayer.posY, ItemTeleport.mc.thePlayer.posZ, true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(ItemTeleport.mc.thePlayer.posX, ItemTeleport.mc.thePlayer.posY + 4.0, ItemTeleport.mc.thePlayer.posZ, true));
                            ItemTeleport.mc.getNetHandler().addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition((double)vector3f.x, (double)vector3f.y, (double)vector3f.z, true));
                            MovementUtils.forward(0.04);
                        }
                        break;
                    }
                }
                if (this.resetAfterTp.asBoolean()) {
                    this.endPos = null;
                }
                ChatUtils.displayChatMessage("§7[§8§lItemTeleport§7] §3Tried to collect items");
            }
            else {
                ItemTeleport.mc.thePlayer.jump();
            }
        }
    }
    
    @EventTarget
    public void onRender3D(final Render3DEvent event) {
        this.objectPosition = ItemTeleport.mc.thePlayer.rayTrace(1000.0, event.getPartialTicks());
        if (this.objectPosition.getBlockPos() == null) {
            return;
        }
        final int x = this.objectPosition.getBlockPos().getX();
        final int y = this.objectPosition.getBlockPos().getY();
        final int z = this.objectPosition.getBlockPos().getZ();
        if (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getMaterial() != Material.air) {
            final RenderManager renderManager = ItemTeleport.mc.getRenderManager();
            GL11.glBlendFunc(770, 771);
            GL11.glEnable(3042);
            GL11.glLineWidth(2.0f);
            GL11.glDisable(3553);
            GL11.glDisable(2929);
            GL11.glDepthMask(false);
            RenderUtils.glColor((BlockUtils.getBlock(this.objectPosition.getBlockPos().up()).getMaterial() != Material.air) ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
            RenderUtils.drawFilledBox(new AxisAlignedBB(x - renderManager.renderPosX, y + 1 - renderManager.renderPosY, z - renderManager.renderPosZ, x - renderManager.renderPosX + 1.0, y + 1.2 - renderManager.renderPosY, z - renderManager.renderPosZ + 1.0));
            GL11.glEnable(3553);
            GL11.glEnable(2929);
            GL11.glDepthMask(true);
            GL11.glDisable(3042);
            RenderUtils.renderNameTag(Math.round(ItemTeleport.mc.thePlayer.getDistance((double)x, (double)y, (double)z)) + "m", x + 0.5, y + 1.7, z + 0.5);
            GlStateManager.resetColor();
        }
    }
    
    private List<Vector3f> vanillaTeleportPositions(final double tpX, final double tpY, final double tpZ, final double speed) {
        final List<Vector3f> positions = new ArrayList<Vector3f>();
        final double posX = tpX - ItemTeleport.mc.thePlayer.posX;
        final double posZ = tpZ - ItemTeleport.mc.thePlayer.posZ;
        final float yaw = (float)(Math.atan2(posZ, posX) * 180.0 / 3.141592653589793 - 90.0);
        double tmpY = ItemTeleport.mc.thePlayer.posY;
        double steps = 1.0;
        for (double d = speed; d < this.getDistance(ItemTeleport.mc.thePlayer.posX, ItemTeleport.mc.thePlayer.posY, ItemTeleport.mc.thePlayer.posZ, tpX, tpY, tpZ); d += speed) {
            ++steps;
        }
        for (double d = speed; d < this.getDistance(ItemTeleport.mc.thePlayer.posX, ItemTeleport.mc.thePlayer.posY, ItemTeleport.mc.thePlayer.posZ, tpX, tpY, tpZ); d += speed) {
            final double tmpX = ItemTeleport.mc.thePlayer.posX - Math.sin(Math.toRadians(yaw)) * d;
            final double tmpZ = ItemTeleport.mc.thePlayer.posZ + Math.cos(Math.toRadians(yaw)) * d;
            tmpY -= (ItemTeleport.mc.thePlayer.posY - tpY) / steps;
            positions.add(new Vector3f((float)tmpX, (float)tmpY, (float)tmpZ));
        }
        positions.add(new Vector3f((float)tpX, (float)tpY, (float)tpZ));
        return positions;
    }
    
    private double getDistance(final double x1, final double y1, final double z1, final double x2, final double y2, final double z2) {
        final double d0 = x1 - x2;
        final double d2 = y1 - y2;
        final double d3 = z1 - z2;
        return MathHelper.sqrt_double(d0 * d0 + d2 * d2 + d3 * d3);
    }
}
